(()=>{"use strict";class e{static createPoint(e,t){return{x:e,y:t}}static emptyPoint(){return{x:0,y:0}}static equals(e,t){return e.x==t.x&&e.y==t.y}static distance(e,t){let r=e.x-t.x,n=e.y-t.y;return Math.sqrt(r*r+n*n)}static substract(e,t){return{x:e.x-t.x,y:e.y-t.y}}static add(e,t){return{x:e.x+t.x,y:e.y+t.y}}}class t{static emptyRect(){return{llx:0,lly:0,urx:0,ury:0}}static createRect(e,t,r,n){return{llx:e,lly:t,urx:r,ury:n}}static equals(e,t){return e.llx===t.llx&&e.lly===t.lly&&e.ury===t.ury&&e.urx===t.urx}static center(e){return{x:.5*(e.llx+e.urx),y:.5*(e.lly+e.ury)}}static empty(e){return e.llx==e.urx&&e.lly==e.ury}static width(e){return e.urx-e.llx}static height(e){return e.ury-e.lly}static union(e,t){return{llx:Math.min(e.llx,t.llx),lly:Math.min(e.lly,t.lly),urx:Math.max(e.urx,t.urx),ury:Math.max(e.ury,t.ury)}}static contains(e,t){return(t.x-e.llx)*(t.x-e.urx)<=0&&(t.y-e.lly)*(t.y-e.ury)<=0}static multiply(e,t){return{llx:e*t.llx,lly:e*t.lly,urx:e*t.urx,ury:e*t.ury}}static offset(e,t,r){return{llx:e.llx+t,lly:e.lly+r,urx:e.urx+t,ury:e.ury+r}}}class r{static identityMatrix(){return{m00:1,m01:0,m02:0,m10:0,m11:1,m12:0}}static createMatrix(e,t,r,n,o,i){return{m00:e,m01:t,m02:r,m10:n,m11:o,m12:i}}static scaleMatrix(e,t){return{m00:e,m01:0,m02:0,m10:0,m11:t,m12:0}}static translateMatrix(e,t){return{m00:1,m01:0,m02:e,m10:0,m11:1,m12:t}}static rotateMatrix(e){return{m00:Math.cos(e),m01:-Math.sin(e),m02:0,m10:Math.sin(e),m11:Math.cos(e),m12:0}}static multiply(e,t){return{m00:e.m00*t.m00+e.m01*t.m10,m01:e.m00*t.m01+e.m01*t.m11,m02:e.m00*t.m02+e.m01*t.m12+e.m02,m10:e.m10*t.m00+e.m11*t.m10,m11:e.m10*t.m01+e.m11*t.m11,m12:e.m10*t.m02+e.m11*t.m12+e.m12}}static rotateAroundPoint(e,t,n){let o=r.translateMatrix(-t,-n),i=r.rotateMatrix(e),a=r.translateMatrix(t,n);return r.multiply(a,r.multiply(i,o))}static scaleToRect(e,n){if(0==t.width(e)||0==t.height(e)){let o=t.center(e),i=t.center(n);return r.translateMatrix(i.x-o.x,i.y-o.y)}let o=r.translateMatrix(-e.llx,-e.lly),i=r.scaleMatrix((n.urx-n.llx)/(e.urx-e.llx),(n.ury-n.lly)/(e.ury-e.lly)),a=r.translateMatrix(n.llx,n.lly);return r.multiply(a,r.multiply(i,o))}static equals(e,t){return e.m00===t.m00&&e.m01===t.m01&&e.m02===t.m02&&e.m10===t.m10&&e.m11===t.m11&&e.m12===t.m12}static calcPoint(e,t){return{x:e.m00*t.x+e.m01*t.y+e.m02,y:e.m10*t.x+e.m11*t.y+e.m12}}static isIdentity(e){return 1==e.m00&&1==e.m11&&0==e.m01&&0==e.m10&&0==e.m02&&0==e.m12}static getUnrotatedMatrix(e){const t=r.calcPoint(e,{x:0,y:0}),n=r.calcPoint(e,{x:1,y:0}),o={x:n.x-t.x,y:n.y-t.y};let i=0==o.x&&0==o.y?0:Math.atan2(o.y,o.x),a=r.multiply(r.rotateMatrix(-i),e);return a.m11<0&&(i+=Math.PI,a=r.multiply(r.rotateMatrix(-Math.PI),a)),i<-Math.PI&&(i+=2*Math.PI),i>Math.PI&&(i-=2*Math.PI),{matrix:a,angleRadians:i}}invert(e){let t=e.m00*e.m11-e.m01*e.m10;return 0!=t?{m00:e.m11/t,m01:-e.m01/t,m02:(e.m01*e.m12-e.m02*e.m11)/t,m10:-e.m10/t,m11:e.m00/t,m12:-(e.m00*e.m12-e.m02*e.m10)/t}:r.identityMatrix()}}var n,o,i,a;!function(e){e.SELECTION_BOX="SELECtION_BOX"}(n||(n={})),function(e){e.IMAGE="IMAGE",e.DESIGN="DESIGN",e.LETTERING="LETTERING",e.GRID="GRID"}(o||(o={})),function(e){e.hitNothing="hitNothing",e.hitTopLeft="hitTopLeft",e.hitTopRight="hitTopRight",e.hitBottomRight="hitBottomRight",e.hitBottomLeft="hitBottomLeft",e.hitTop="hitTop",e.hitRight="hitRight",e.hitBottom="hitBottom",e.hitLeft="hitLeft",e.hitMiddle="hitMiddle"}(i||(i={}));class s{static createEmpty(){return{type:n.SELECTION_BOX,isRotate:!1,display:!1,rect:t.emptyRect()}}static cloneSelectionBox(e){return Object.assign({},e)}}const l=(a="undefined"!=typeof document&&document.currentScript?document.currentScript.src:void 0,function(e){var t,r,n=void 0!==(e=e||{})?e:{};n.ready=new Promise((function(e,n){t=e,r=n}));var o,i={};for(o in n)n.hasOwnProperty(o)&&(i[o]=n[o]);var s,l,u=[],c="./this.program",d=function(e,t){throw t},f="";"undefined"!=typeof document&&document.currentScript&&(f=document.currentScript.src),a&&(f=a),f=0!==f.indexOf("blob:")?f.substr(0,f.replace(/[?#].*/,"").lastIndexOf("/")+1):"",s=function(e){var t=new XMLHttpRequest;return t.open("GET",e,!1),t.send(null),t.responseText},l=function(e,t,r){var n=new XMLHttpRequest;n.open("GET",e,!0),n.responseType="arraybuffer",n.onload=function(){200==n.status||0==n.status&&n.response?t(n.response):r()},n.onerror=r,n.send(null)};var m,h=n.print||console.log.bind(console),p=n.printErr||console.warn.bind(console);for(o in i)i.hasOwnProperty(o)&&(n[o]=i[o]);i=null,n.arguments&&(u=n.arguments),n.thisProgram&&(c=n.thisProgram),n.quit&&(d=n.quit),n.wasmBinary&&(m=n.wasmBinary);var g=n.noExitRuntime||!0;"object"!=typeof WebAssembly&&de("no native wasm support detected");var v,y=!1;function _(e,t){e||de("Assertion failed: "+t)}function w(e){var t=n["_"+e];return _(t,"Cannot call unknown function "+e+", make sure it is exported"),t}function E(e,t,r,n,o){var i={string:function(e){var t=0;if(null!=e&&0!==e){var r=1+(e.length<<2);S(e,t=Ar(r),r)}return t},array:function(e){var t=Ar(e.length);return Y(e,t),t}},a=w(e),s=[],l=0;if(n)for(var u=0;u<n.length;u++){var c=i[r[u]];c?(0===l&&(l=Tr()),s[u]=c(n[u])):s[u]=n[u]}var d=a.apply(null,s);return function(e){return 0!==l&&Dr(l),function(e){return"string"===t?C(e):"boolean"===t?Boolean(e):e}(e)}(d)}var b="undefined"!=typeof TextDecoder?new TextDecoder("utf8"):void 0;function x(e,t,r){for(var n=t+r,o=t;e[o]&&!(o>=n);)++o;if(o-t>16&&e.subarray&&b)return b.decode(e.subarray(t,o));for(var i="";t<o;){var a=e[t++];if(128&a){var s=63&e[t++];if(192!=(224&a)){var l=63&e[t++];if((a=224==(240&a)?(15&a)<<12|s<<6|l:(7&a)<<18|s<<12|l<<6|63&e[t++])<65536)i+=String.fromCharCode(a);else{var u=a-65536;i+=String.fromCharCode(55296|u>>10,56320|1023&u)}}else i+=String.fromCharCode((31&a)<<6|s)}else i+=String.fromCharCode(a)}return i}function C(e,t){return e?x(L,e,t):""}function P(e,t,r,n){if(!(n>0))return 0;for(var o=r,i=r+n-1,a=0;a<e.length;++a){var s=e.charCodeAt(a);if(s>=55296&&s<=57343&&(s=65536+((1023&s)<<10)|1023&e.charCodeAt(++a)),s<=127){if(r>=i)break;t[r++]=s}else if(s<=2047){if(r+1>=i)break;t[r++]=192|s>>6,t[r++]=128|63&s}else if(s<=65535){if(r+2>=i)break;t[r++]=224|s>>12,t[r++]=128|s>>6&63,t[r++]=128|63&s}else{if(r+3>=i)break;t[r++]=240|s>>18,t[r++]=128|s>>12&63,t[r++]=128|s>>6&63,t[r++]=128|63&s}}return t[r]=0,r-o}function S(e,t,r){return P(e,L,t,r)}function k(e){for(var t=0,r=0;r<e.length;++r){var n=e.charCodeAt(r);n>=55296&&n<=57343&&(n=65536+((1023&n)<<10)|1023&e.charCodeAt(++r)),n<=127?++t:t+=n<=2047?2:n<=65535?3:4}return t}function T(e){for(var t="";;){var r=L[0|e++];if(!r)return t;t+=String.fromCharCode(r)}}var D,A,L,I,R,M,F,O,B,N="undefined"!=typeof TextDecoder?new TextDecoder("utf-16le"):void 0;function $(e,t){for(var r=e,n=r>>1,o=n+t/2;!(n>=o)&&R[n];)++n;if((r=n<<1)-e>32&&N)return N.decode(L.subarray(e,r));for(var i="",a=0;!(a>=t/2);++a){var s=I[e+2*a>>1];if(0==s)break;i+=String.fromCharCode(s)}return i}function j(e,t,r){if(void 0===r&&(r=2147483647),r<2)return 0;for(var n=t,o=(r-=2)<2*e.length?r/2:e.length,i=0;i<o;++i){var a=e.charCodeAt(i);I[t>>1]=a,t+=2}return I[t>>1]=0,t-n}function z(e){return 2*e.length}function U(e,t){for(var r=0,n="";!(r>=t/4);){var o=M[e+4*r>>2];if(0==o)break;if(++r,o>=65536){var i=o-65536;n+=String.fromCharCode(55296|i>>10,56320|1023&i)}else n+=String.fromCharCode(o)}return n}function G(e,t,r){if(void 0===r&&(r=2147483647),r<4)return 0;for(var n=t,o=n+r-4,i=0;i<e.length;++i){var a=e.charCodeAt(i);if(a>=55296&&a<=57343&&(a=65536+((1023&a)<<10)|1023&e.charCodeAt(++i)),M[t>>2]=a,(t+=4)+4>o)break}return M[t>>2]=0,t-n}function W(e){for(var t=0,r=0;r<e.length;++r){var n=e.charCodeAt(r);n>=55296&&n<=57343&&++r,t+=4}return t}function H(e){var t=k(e)+1,r=Er(t);return r&&P(e,A,r,t),r}function V(e){var t=k(e)+1,r=Ar(t);return P(e,A,r,t),r}function Y(e,t){A.set(e,t)}n.INITIAL_MEMORY;var q,K=[],X=[],Z=[],Q=[],J=[],ee=!1;function te(){return g||!1}var re,ne,oe,ie,ae=0,se=null,le=null;function ue(e){ae++,n.monitorRunDependencies&&n.monitorRunDependencies(ae)}function ce(e){if(ae--,n.monitorRunDependencies&&n.monitorRunDependencies(ae),0==ae&&(null!==se&&(clearInterval(se),se=null),le)){var t=le;le=null,t()}}function de(e){n.onAbort&&n.onAbort(e),p(e="Aborted("+e+")"),y=!0,v=1,e+=". Build with -s ASSERTIONS=1 for more info.";var t=new WebAssembly.RuntimeError(e);throw r(t),t}function fe(e){return e.startsWith("data:application/octet-stream;base64,")}function me(e){try{if(e==re&&m)return new Uint8Array(m);throw"both async and sync fetching of the wasm failed"}catch(e){de(e)}}n.preloadedImages={},n.preloadedAudios={},fe(re="MelcoRendererApp.wasm")||(ne=re,re=n.locateFile?n.locateFile(ne,f):f+ne);var he={400400:function(){var e="";if("undefined"!=typeof process)for(var t in process.env)e+=t+"="+process.env[t]+"\b";const r=k(e+="\b")+1,n=Er(r);return S(e,n,r),n},400658:function(e){var t=C(e);if("undefined"!=typeof process&&t in process.env){var r=process.env[t],n=k(r)+1,o=Er(n);return S(r,o,n),o}return 0},400908:function(e){document.title=C(e)},400945:function(e){(n.canvas.closest(".mn-container")||document.getElementById("container")).className=["mn-container",T(e)].join(" ")},401094:function(){var e=n.keyboardListeningElement||document;if(e===document)return 1;if(e===window)return 2;if("id"in e){var t=k(e.id)+1,r=Er(t);return S(e.id,r,t),r}return 0},401392:function(e){n.canvas.style.cursor=T(e)},401445:function(e,t){var r=function(){var n=window.requestAnimationFrame(r);q.get(e).apply(null,[t])||window.cancelAnimationFrame(n)};window.requestAnimationFrame(r)},401650:function(){var e=n.canvas.id,t=k(e)+1,r=Er(t);return S(e,r,t),r},401798:function(){var e=navigator.userAgent.match(/Firefox\/(\d+)/);return e?0|e[1]:0}};function pe(e){for(;e.length>0;){var t=e.shift();if("function"!=typeof t){var r=t.func;"number"==typeof r?void 0===t.arg?ve(r)():ve(r)(t.arg):r(void 0===t.arg?null:t.arg)}else t(n)}}var ge=[];function ve(e){var t=ge[e];return t||(e>=ge.length&&(ge.length=e+1),ge[e]=t=q.get(e)),t}function ye(e){if(e instanceof Lr||"unwind"==e)return v;d(1,e)}function _e(e){this.excPtr=e,this.ptr=e-16,this.set_type=function(e){M[this.ptr+4>>2]=e},this.get_type=function(){return M[this.ptr+4>>2]},this.set_destructor=function(e){M[this.ptr+8>>2]=e},this.get_destructor=function(){return M[this.ptr+8>>2]},this.set_refcount=function(e){M[this.ptr>>2]=e},this.set_caught=function(e){e=e?1:0,A[this.ptr+12|0]=e},this.get_caught=function(){return 0!=A[this.ptr+12|0]},this.set_rethrown=function(e){e=e?1:0,A[this.ptr+13|0]=e},this.get_rethrown=function(){return 0!=A[this.ptr+13|0]},this.init=function(e,t){this.set_type(e),this.set_destructor(t),this.set_refcount(0),this.set_caught(!1),this.set_rethrown(!1)},this.add_ref=function(){var e=M[this.ptr>>2];M[this.ptr>>2]=e+1},this.release_ref=function(){var e=M[this.ptr>>2];return M[this.ptr>>2]=e-1,1===e}}var we={splitPath:function(e){return/^(\/?|)([\s\S]*?)((?:\.{1,2}|[^\/]+?|)(\.[^.\/]*|))(?:[\/]*)$/.exec(e).slice(1)},normalizeArray:function(e,t){for(var r=0,n=e.length-1;n>=0;n--){var o=e[n];"."===o?e.splice(n,1):".."===o?(e.splice(n,1),r++):r&&(e.splice(n,1),r--)}if(t)for(;r;r--)e.unshift("..");return e},normalize:function(e){var t="/"===e.charAt(0),r="/"===e.substr(-1);return(e=we.normalizeArray(e.split("/").filter((function(e){return!!e})),!t).join("/"))||t||(e="."),e&&r&&(e+="/"),(t?"/":"")+e},dirname:function(e){var t=we.splitPath(e),r=t[0],n=t[1];return r||n?(n&&(n=n.substr(0,n.length-1)),r+n):"."},basename:function(e){if("/"===e)return"/";var t=(e=(e=we.normalize(e)).replace(/\/$/,"")).lastIndexOf("/");return-1===t?e:e.substr(t+1)},extname:function(e){return we.splitPath(e)[3]},join:function(){var e=Array.prototype.slice.call(arguments,0);return we.normalize(e.join("/"))},join2:function(e,t){return we.normalize(e+"/"+t)}},Ee={resolve:function(){for(var e="",t=!1,r=arguments.length-1;r>=-1&&!t;r--){var n=r>=0?arguments[r]:Ce.cwd();if("string"!=typeof n)throw new TypeError("Arguments to path.resolve must be strings");if(!n)return"";e=n+"/"+e,t="/"===n.charAt(0)}return(t?"/":"")+(e=we.normalizeArray(e.split("/").filter((function(e){return!!e})),!t).join("/"))||"."},relative:function(e,t){function r(e){for(var t=0;t<e.length&&""===e[t];t++);for(var r=e.length-1;r>=0&&""===e[r];r--);return t>r?[]:e.slice(t,r-t+1)}e=Ee.resolve(e).substr(1),t=Ee.resolve(t).substr(1);for(var n=r(e.split("/")),o=r(t.split("/")),i=Math.min(n.length,o.length),a=i,s=0;s<i;s++)if(n[s]!==o[s]){a=s;break}var l=[];for(s=a;s<n.length;s++)l.push("..");return(l=l.concat(o.slice(a))).join("/")}},be={ttys:[],init:function(){},shutdown:function(){},register:function(e,t){be.ttys[e]={input:[],output:[],ops:t},Ce.registerDevice(e,be.stream_ops)},stream_ops:{open:function(e){var t=be.ttys[e.node.rdev];if(!t)throw new Ce.ErrnoError(43);e.tty=t,e.seekable=!1},close:function(e){e.tty.ops.flush(e.tty)},flush:function(e){e.tty.ops.flush(e.tty)},read:function(e,t,r,n,o){if(!e.tty||!e.tty.ops.get_char)throw new Ce.ErrnoError(60);for(var i=0,a=0;a<n;a++){var s;try{s=e.tty.ops.get_char(e.tty)}catch(e){throw new Ce.ErrnoError(29)}if(void 0===s&&0===i)throw new Ce.ErrnoError(6);if(null==s)break;i++,t[r+a]=s}return i&&(e.node.timestamp=Date.now()),i},write:function(e,t,r,n,o){if(!e.tty||!e.tty.ops.put_char)throw new Ce.ErrnoError(60);try{for(var i=0;i<n;i++)e.tty.ops.put_char(e.tty,t[r+i])}catch(e){throw new Ce.ErrnoError(29)}return n&&(e.node.timestamp=Date.now()),i}},default_tty_ops:{get_char:function(e){if(!e.input.length){var t=null;if("undefined"!=typeof window&&"function"==typeof window.prompt?null!==(t=window.prompt("Input: "))&&(t+="\n"):"function"==typeof readline&&null!==(t=readline())&&(t+="\n"),!t)return null;e.input=yr(t,!0)}return e.input.shift()},put_char:function(e,t){null===t||10===t?(h(x(e.output,0)),e.output=[]):0!=t&&e.output.push(t)},flush:function(e){e.output&&e.output.length>0&&(h(x(e.output,0)),e.output=[])}},default_tty1_ops:{put_char:function(e,t){null===t||10===t?(p(x(e.output,0)),e.output=[]):0!=t&&e.output.push(t)},flush:function(e){e.output&&e.output.length>0&&(p(x(e.output,0)),e.output=[])}}},xe={ops_table:null,mount:function(e){return xe.createNode(null,"/",16895,0)},createNode:function(e,t,r,n){if(Ce.isBlkdev(r)||Ce.isFIFO(r))throw new Ce.ErrnoError(63);xe.ops_table||(xe.ops_table={dir:{node:{getattr:xe.node_ops.getattr,setattr:xe.node_ops.setattr,lookup:xe.node_ops.lookup,mknod:xe.node_ops.mknod,rename:xe.node_ops.rename,unlink:xe.node_ops.unlink,rmdir:xe.node_ops.rmdir,readdir:xe.node_ops.readdir,symlink:xe.node_ops.symlink},stream:{llseek:xe.stream_ops.llseek}},file:{node:{getattr:xe.node_ops.getattr,setattr:xe.node_ops.setattr},stream:{llseek:xe.stream_ops.llseek,read:xe.stream_ops.read,write:xe.stream_ops.write,allocate:xe.stream_ops.allocate,mmap:xe.stream_ops.mmap,msync:xe.stream_ops.msync}},link:{node:{getattr:xe.node_ops.getattr,setattr:xe.node_ops.setattr,readlink:xe.node_ops.readlink},stream:{}},chrdev:{node:{getattr:xe.node_ops.getattr,setattr:xe.node_ops.setattr},stream:Ce.chrdev_stream_ops}});var o=Ce.createNode(e,t,r,n);return Ce.isDir(o.mode)?(o.node_ops=xe.ops_table.dir.node,o.stream_ops=xe.ops_table.dir.stream,o.contents={}):Ce.isFile(o.mode)?(o.node_ops=xe.ops_table.file.node,o.stream_ops=xe.ops_table.file.stream,o.usedBytes=0,o.contents=null):Ce.isLink(o.mode)?(o.node_ops=xe.ops_table.link.node,o.stream_ops=xe.ops_table.link.stream):Ce.isChrdev(o.mode)&&(o.node_ops=xe.ops_table.chrdev.node,o.stream_ops=xe.ops_table.chrdev.stream),o.timestamp=Date.now(),e&&(e.contents[t]=o,e.timestamp=o.timestamp),o},getFileDataAsTypedArray:function(e){return e.contents?e.contents.subarray?e.contents.subarray(0,e.usedBytes):new Uint8Array(e.contents):new Uint8Array(0)},expandFileStorage:function(e,t){var r=e.contents?e.contents.length:0;if(!(r>=t)){t=Math.max(t,r*(r<1048576?2:1.125)>>>0),0!=r&&(t=Math.max(t,256));var n=e.contents;e.contents=new Uint8Array(t),e.usedBytes>0&&e.contents.set(n.subarray(0,e.usedBytes),0)}},resizeFileStorage:function(e,t){if(e.usedBytes!=t)if(0==t)e.contents=null,e.usedBytes=0;else{var r=e.contents;e.contents=new Uint8Array(t),r&&e.contents.set(r.subarray(0,Math.min(t,e.usedBytes))),e.usedBytes=t}},node_ops:{getattr:function(e){var t={};return t.dev=Ce.isChrdev(e.mode)?e.id:1,t.ino=e.id,t.mode=e.mode,t.nlink=1,t.uid=0,t.gid=0,t.rdev=e.rdev,Ce.isDir(e.mode)?t.size=4096:Ce.isFile(e.mode)?t.size=e.usedBytes:Ce.isLink(e.mode)?t.size=e.link.length:t.size=0,t.atime=new Date(e.timestamp),t.mtime=new Date(e.timestamp),t.ctime=new Date(e.timestamp),t.blksize=4096,t.blocks=Math.ceil(t.size/t.blksize),t},setattr:function(e,t){void 0!==t.mode&&(e.mode=t.mode),void 0!==t.timestamp&&(e.timestamp=t.timestamp),void 0!==t.size&&xe.resizeFileStorage(e,t.size)},lookup:function(e,t){throw Ce.genericErrors[44]},mknod:function(e,t,r,n){return xe.createNode(e,t,r,n)},rename:function(e,t,r){if(Ce.isDir(e.mode)){var n;try{n=Ce.lookupNode(t,r)}catch(e){}if(n)for(var o in n.contents)throw new Ce.ErrnoError(55)}delete e.parent.contents[e.name],e.parent.timestamp=Date.now(),e.name=r,t.contents[r]=e,t.timestamp=e.parent.timestamp,e.parent=t},unlink:function(e,t){delete e.contents[t],e.timestamp=Date.now()},rmdir:function(e,t){var r=Ce.lookupNode(e,t);for(var n in r.contents)throw new Ce.ErrnoError(55);delete e.contents[t],e.timestamp=Date.now()},readdir:function(e){var t=[".",".."];for(var r in e.contents)e.contents.hasOwnProperty(r)&&t.push(r);return t},symlink:function(e,t,r){var n=xe.createNode(e,t,41471,0);return n.link=r,n},readlink:function(e){if(!Ce.isLink(e.mode))throw new Ce.ErrnoError(28);return e.link}},stream_ops:{read:function(e,t,r,n,o){var i=e.node.contents;if(o>=e.node.usedBytes)return 0;var a=Math.min(e.node.usedBytes-o,n);if(a>8&&i.subarray)t.set(i.subarray(o,o+a),r);else for(var s=0;s<a;s++)t[r+s]=i[o+s];return a},write:function(e,t,r,n,o,i){if(!n)return 0;var a=e.node;if(a.timestamp=Date.now(),t.subarray&&(!a.contents||a.contents.subarray)){if(i)return a.contents=t.subarray(r,r+n),a.usedBytes=n,n;if(0===a.usedBytes&&0===o)return a.contents=t.slice(r,r+n),a.usedBytes=n,n;if(o+n<=a.usedBytes)return a.contents.set(t.subarray(r,r+n),o),n}if(xe.expandFileStorage(a,o+n),a.contents.subarray&&t.subarray)a.contents.set(t.subarray(r,r+n),o);else for(var s=0;s<n;s++)a.contents[o+s]=t[r+s];return a.usedBytes=Math.max(a.usedBytes,o+n),n},llseek:function(e,t,r){var n=t;if(1===r?n+=e.position:2===r&&Ce.isFile(e.node.mode)&&(n+=e.node.usedBytes),n<0)throw new Ce.ErrnoError(28);return n},allocate:function(e,t,r){xe.expandFileStorage(e.node,t+r),e.node.usedBytes=Math.max(e.node.usedBytes,t+r)},mmap:function(e,t,r,n,o,i){if(0!==t)throw new Ce.ErrnoError(28);if(!Ce.isFile(e.node.mode))throw new Ce.ErrnoError(43);var a,s,l=e.node.contents;if(2&i||l.buffer!==D){if((n>0||n+r<l.length)&&(l=l.subarray?l.subarray(n,n+r):Array.prototype.slice.call(l,n,n+r)),s=!0,!(a=void de()))throw new Ce.ErrnoError(48);A.set(l,a)}else s=!1,a=l.byteOffset;return{ptr:a,allocated:s}},msync:function(e,t,r,n,o){if(!Ce.isFile(e.node.mode))throw new Ce.ErrnoError(43);return 2&o||xe.stream_ops.write(e,t,0,n,r,!1),0}}},Ce={root:null,mounts:[],devices:{},streams:[],nextInode:1,nameTable:null,currentPath:"/",initialized:!1,ignorePermissions:!0,ErrnoError:null,genericErrors:{},filesystems:null,syncFSRequests:0,lookupPath:function(e,t){if(t=t||{},!(e=Ee.resolve(Ce.cwd(),e)))return{path:"",node:null};var r={follow_mount:!0,recurse_count:0};for(var n in r)void 0===t[n]&&(t[n]=r[n]);if(t.recurse_count>8)throw new Ce.ErrnoError(32);for(var o=we.normalizeArray(e.split("/").filter((function(e){return!!e})),!1),i=Ce.root,a="/",s=0;s<o.length;s++){var l=s===o.length-1;if(l&&t.parent)break;if(i=Ce.lookupNode(i,o[s]),a=we.join2(a,o[s]),Ce.isMountpoint(i)&&(!l||l&&t.follow_mount)&&(i=i.mounted.root),!l||t.follow)for(var u=0;Ce.isLink(i.mode);){var c=Ce.readlink(a);if(a=Ee.resolve(we.dirname(a),c),i=Ce.lookupPath(a,{recurse_count:t.recurse_count}).node,u++>40)throw new Ce.ErrnoError(32)}}return{path:a,node:i}},getPath:function(e){for(var t;;){if(Ce.isRoot(e)){var r=e.mount.mountpoint;return t?"/"!==r[r.length-1]?r+"/"+t:r+t:r}t=t?e.name+"/"+t:e.name,e=e.parent}},hashName:function(e,t){for(var r=0,n=0;n<t.length;n++)r=(r<<5)-r+t.charCodeAt(n)|0;return(e+r>>>0)%Ce.nameTable.length},hashAddNode:function(e){var t=Ce.hashName(e.parent.id,e.name);e.name_next=Ce.nameTable[t],Ce.nameTable[t]=e},hashRemoveNode:function(e){var t=Ce.hashName(e.parent.id,e.name);if(Ce.nameTable[t]===e)Ce.nameTable[t]=e.name_next;else for(var r=Ce.nameTable[t];r;){if(r.name_next===e){r.name_next=e.name_next;break}r=r.name_next}},lookupNode:function(e,t){var r=Ce.mayLookup(e);if(r)throw new Ce.ErrnoError(r,e);for(var n=Ce.hashName(e.id,t),o=Ce.nameTable[n];o;o=o.name_next){var i=o.name;if(o.parent.id===e.id&&i===t)return o}return Ce.lookup(e,t)},createNode:function(e,t,r,n){var o=new Ce.FSNode(e,t,r,n);return Ce.hashAddNode(o),o},destroyNode:function(e){Ce.hashRemoveNode(e)},isRoot:function(e){return e===e.parent},isMountpoint:function(e){return!!e.mounted},isFile:function(e){return 32768==(61440&e)},isDir:function(e){return 16384==(61440&e)},isLink:function(e){return 40960==(61440&e)},isChrdev:function(e){return 8192==(61440&e)},isBlkdev:function(e){return 24576==(61440&e)},isFIFO:function(e){return 4096==(61440&e)},isSocket:function(e){return!(49152&~e)},flagModes:{r:0,"r+":2,w:577,"w+":578,a:1089,"a+":1090},modeStringToFlags:function(e){var t=Ce.flagModes[e];if(void 0===t)throw new Error("Unknown file open mode: "+e);return t},flagsToPermissionString:function(e){var t=["r","w","rw"][3&e];return 512&e&&(t+="w"),t},nodePermissions:function(e,t){return Ce.ignorePermissions||(!t.includes("r")||292&e.mode)&&(!t.includes("w")||146&e.mode)&&(!t.includes("x")||73&e.mode)?0:2},mayLookup:function(e){return Ce.nodePermissions(e,"x")||(e.node_ops.lookup?0:2)},mayCreate:function(e,t){try{return Ce.lookupNode(e,t),20}catch(e){}return Ce.nodePermissions(e,"wx")},mayDelete:function(e,t,r){var n;try{n=Ce.lookupNode(e,t)}catch(e){return e.errno}var o=Ce.nodePermissions(e,"wx");if(o)return o;if(r){if(!Ce.isDir(n.mode))return 54;if(Ce.isRoot(n)||Ce.getPath(n)===Ce.cwd())return 10}else if(Ce.isDir(n.mode))return 31;return 0},mayOpen:function(e,t){return e?Ce.isLink(e.mode)?32:Ce.isDir(e.mode)&&("r"!==Ce.flagsToPermissionString(t)||512&t)?31:Ce.nodePermissions(e,Ce.flagsToPermissionString(t)):44},MAX_OPEN_FDS:4096,nextfd:function(e,t){e=e||0,t=t||Ce.MAX_OPEN_FDS;for(var r=e;r<=t;r++)if(!Ce.streams[r])return r;throw new Ce.ErrnoError(33)},getStream:function(e){return Ce.streams[e]},createStream:function(e,t,r){Ce.FSStream||(Ce.FSStream=function(){},Ce.FSStream.prototype={object:{get:function(){return this.node},set:function(e){this.node=e}},isRead:{get:function(){return 1!=(2097155&this.flags)}},isWrite:{get:function(){return!!(2097155&this.flags)}},isAppend:{get:function(){return 1024&this.flags}}});var n=new Ce.FSStream;for(var o in e)n[o]=e[o];e=n;var i=Ce.nextfd(t,r);return e.fd=i,Ce.streams[i]=e,e},closeStream:function(e){Ce.streams[e]=null},chrdev_stream_ops:{open:function(e){var t=Ce.getDevice(e.node.rdev);e.stream_ops=t.stream_ops,e.stream_ops.open&&e.stream_ops.open(e)},llseek:function(){throw new Ce.ErrnoError(70)}},major:function(e){return e>>8},minor:function(e){return 255&e},makedev:function(e,t){return e<<8|t},registerDevice:function(e,t){Ce.devices[e]={stream_ops:t}},getDevice:function(e){return Ce.devices[e]},getMounts:function(e){for(var t=[],r=[e];r.length;){var n=r.pop();t.push(n),r.push.apply(r,n.mounts)}return t},syncfs:function(e,t){"function"==typeof e&&(t=e,e=!1),Ce.syncFSRequests++,Ce.syncFSRequests>1&&p("warning: "+Ce.syncFSRequests+" FS.syncfs operations in flight at once, probably just doing extra work");var r=Ce.getMounts(Ce.root.mount),n=0;function o(e){return Ce.syncFSRequests--,t(e)}function i(e){if(e)return i.errored?void 0:(i.errored=!0,o(e));++n>=r.length&&o(null)}r.forEach((function(t){if(!t.type.syncfs)return i(null);t.type.syncfs(t,e,i)}))},mount:function(e,t,r){var n,o="/"===r,i=!r;if(o&&Ce.root)throw new Ce.ErrnoError(10);if(!o&&!i){var a=Ce.lookupPath(r,{follow_mount:!1});if(r=a.path,n=a.node,Ce.isMountpoint(n))throw new Ce.ErrnoError(10);if(!Ce.isDir(n.mode))throw new Ce.ErrnoError(54)}var s={type:e,opts:t,mountpoint:r,mounts:[]},l=e.mount(s);return l.mount=s,s.root=l,o?Ce.root=l:n&&(n.mounted=s,n.mount&&n.mount.mounts.push(s)),l},unmount:function(e){var t=Ce.lookupPath(e,{follow_mount:!1});if(!Ce.isMountpoint(t.node))throw new Ce.ErrnoError(28);var r=t.node,n=r.mounted,o=Ce.getMounts(n);Object.keys(Ce.nameTable).forEach((function(e){for(var t=Ce.nameTable[e];t;){var r=t.name_next;o.includes(t.mount)&&Ce.destroyNode(t),t=r}})),r.mounted=null;var i=r.mount.mounts.indexOf(n);r.mount.mounts.splice(i,1)},lookup:function(e,t){return e.node_ops.lookup(e,t)},mknod:function(e,t,r){var n=Ce.lookupPath(e,{parent:!0}).node,o=we.basename(e);if(!o||"."===o||".."===o)throw new Ce.ErrnoError(28);var i=Ce.mayCreate(n,o);if(i)throw new Ce.ErrnoError(i);if(!n.node_ops.mknod)throw new Ce.ErrnoError(63);return n.node_ops.mknod(n,o,t,r)},create:function(e,t){return t=void 0!==t?t:438,t&=4095,t|=32768,Ce.mknod(e,t,0)},mkdir:function(e,t){return t=void 0!==t?t:511,t&=1023,t|=16384,Ce.mknod(e,t,0)},mkdirTree:function(e,t){for(var r=e.split("/"),n="",o=0;o<r.length;++o)if(r[o]){n+="/"+r[o];try{Ce.mkdir(n,t)}catch(e){if(20!=e.errno)throw e}}},mkdev:function(e,t,r){return void 0===r&&(r=t,t=438),t|=8192,Ce.mknod(e,t,r)},symlink:function(e,t){if(!Ee.resolve(e))throw new Ce.ErrnoError(44);var r=Ce.lookupPath(t,{parent:!0}).node;if(!r)throw new Ce.ErrnoError(44);var n=we.basename(t),o=Ce.mayCreate(r,n);if(o)throw new Ce.ErrnoError(o);if(!r.node_ops.symlink)throw new Ce.ErrnoError(63);return r.node_ops.symlink(r,n,e)},rename:function(e,t){var r,n,o=we.dirname(e),i=we.dirname(t),a=we.basename(e),s=we.basename(t);if(r=Ce.lookupPath(e,{parent:!0}).node,n=Ce.lookupPath(t,{parent:!0}).node,!r||!n)throw new Ce.ErrnoError(44);if(r.mount!==n.mount)throw new Ce.ErrnoError(75);var l,u=Ce.lookupNode(r,a),c=Ee.relative(e,i);if("."!==c.charAt(0))throw new Ce.ErrnoError(28);if("."!==(c=Ee.relative(t,o)).charAt(0))throw new Ce.ErrnoError(55);try{l=Ce.lookupNode(n,s)}catch(e){}if(u!==l){var d=Ce.isDir(u.mode),f=Ce.mayDelete(r,a,d);if(f)throw new Ce.ErrnoError(f);if(f=l?Ce.mayDelete(n,s,d):Ce.mayCreate(n,s))throw new Ce.ErrnoError(f);if(!r.node_ops.rename)throw new Ce.ErrnoError(63);if(Ce.isMountpoint(u)||l&&Ce.isMountpoint(l))throw new Ce.ErrnoError(10);if(n!==r&&(f=Ce.nodePermissions(r,"w")))throw new Ce.ErrnoError(f);Ce.hashRemoveNode(u);try{r.node_ops.rename(u,n,s)}catch(e){throw e}finally{Ce.hashAddNode(u)}}},rmdir:function(e){var t=Ce.lookupPath(e,{parent:!0}).node,r=we.basename(e),n=Ce.lookupNode(t,r),o=Ce.mayDelete(t,r,!0);if(o)throw new Ce.ErrnoError(o);if(!t.node_ops.rmdir)throw new Ce.ErrnoError(63);if(Ce.isMountpoint(n))throw new Ce.ErrnoError(10);t.node_ops.rmdir(t,r),Ce.destroyNode(n)},readdir:function(e){var t=Ce.lookupPath(e,{follow:!0}).node;if(!t.node_ops.readdir)throw new Ce.ErrnoError(54);return t.node_ops.readdir(t)},unlink:function(e){var t=Ce.lookupPath(e,{parent:!0}).node,r=we.basename(e),n=Ce.lookupNode(t,r),o=Ce.mayDelete(t,r,!1);if(o)throw new Ce.ErrnoError(o);if(!t.node_ops.unlink)throw new Ce.ErrnoError(63);if(Ce.isMountpoint(n))throw new Ce.ErrnoError(10);t.node_ops.unlink(t,r),Ce.destroyNode(n)},readlink:function(e){var t=Ce.lookupPath(e).node;if(!t)throw new Ce.ErrnoError(44);if(!t.node_ops.readlink)throw new Ce.ErrnoError(28);return Ee.resolve(Ce.getPath(t.parent),t.node_ops.readlink(t))},stat:function(e,t){var r=Ce.lookupPath(e,{follow:!t}).node;if(!r)throw new Ce.ErrnoError(44);if(!r.node_ops.getattr)throw new Ce.ErrnoError(63);return r.node_ops.getattr(r)},lstat:function(e){return Ce.stat(e,!0)},chmod:function(e,t,r){var n;if(!(n="string"==typeof e?Ce.lookupPath(e,{follow:!r}).node:e).node_ops.setattr)throw new Ce.ErrnoError(63);n.node_ops.setattr(n,{mode:4095&t|-4096&n.mode,timestamp:Date.now()})},lchmod:function(e,t){Ce.chmod(e,t,!0)},fchmod:function(e,t){var r=Ce.getStream(e);if(!r)throw new Ce.ErrnoError(8);Ce.chmod(r.node,t)},chown:function(e,t,r,n){var o;if(!(o="string"==typeof e?Ce.lookupPath(e,{follow:!n}).node:e).node_ops.setattr)throw new Ce.ErrnoError(63);o.node_ops.setattr(o,{timestamp:Date.now()})},lchown:function(e,t,r){Ce.chown(e,t,r,!0)},fchown:function(e,t,r){var n=Ce.getStream(e);if(!n)throw new Ce.ErrnoError(8);Ce.chown(n.node,t,r)},truncate:function(e,t){if(t<0)throw new Ce.ErrnoError(28);var r;if(!(r="string"==typeof e?Ce.lookupPath(e,{follow:!0}).node:e).node_ops.setattr)throw new Ce.ErrnoError(63);if(Ce.isDir(r.mode))throw new Ce.ErrnoError(31);if(!Ce.isFile(r.mode))throw new Ce.ErrnoError(28);var n=Ce.nodePermissions(r,"w");if(n)throw new Ce.ErrnoError(n);r.node_ops.setattr(r,{size:t,timestamp:Date.now()})},ftruncate:function(e,t){var r=Ce.getStream(e);if(!r)throw new Ce.ErrnoError(8);if(!(2097155&r.flags))throw new Ce.ErrnoError(28);Ce.truncate(r.node,t)},utime:function(e,t,r){var n=Ce.lookupPath(e,{follow:!0}).node;n.node_ops.setattr(n,{timestamp:Math.max(t,r)})},open:function(e,t,r,o,i){if(""===e)throw new Ce.ErrnoError(44);var a;if(r=void 0===r?438:r,r=64&(t="string"==typeof t?Ce.modeStringToFlags(t):t)?4095&r|32768:0,"object"==typeof e)a=e;else{e=we.normalize(e);try{a=Ce.lookupPath(e,{follow:!(131072&t)}).node}catch(e){}}var s=!1;if(64&t)if(a){if(128&t)throw new Ce.ErrnoError(20)}else a=Ce.mknod(e,r,0),s=!0;if(!a)throw new Ce.ErrnoError(44);if(Ce.isChrdev(a.mode)&&(t&=-513),65536&t&&!Ce.isDir(a.mode))throw new Ce.ErrnoError(54);if(!s){var l=Ce.mayOpen(a,t);if(l)throw new Ce.ErrnoError(l)}512&t&&Ce.truncate(a,0),t&=-131713;var u=Ce.createStream({node:a,path:Ce.getPath(a),id:a.id,flags:t,mode:a.mode,seekable:!0,position:0,stream_ops:a.stream_ops,node_ops:a.node_ops,ungotten:[],error:!1},o,i);return u.stream_ops.open&&u.stream_ops.open(u),!n.logReadFiles||1&t||(Ce.readFiles||(Ce.readFiles={}),e in Ce.readFiles||(Ce.readFiles[e]=1)),u},close:function(e){if(Ce.isClosed(e))throw new Ce.ErrnoError(8);e.getdents&&(e.getdents=null);try{e.stream_ops.close&&e.stream_ops.close(e)}catch(e){throw e}finally{Ce.closeStream(e.fd)}e.fd=null},isClosed:function(e){return null===e.fd},llseek:function(e,t,r){if(Ce.isClosed(e))throw new Ce.ErrnoError(8);if(!e.seekable||!e.stream_ops.llseek)throw new Ce.ErrnoError(70);if(0!=r&&1!=r&&2!=r)throw new Ce.ErrnoError(28);return e.position=e.stream_ops.llseek(e,t,r),e.ungotten=[],e.position},read:function(e,t,r,n,o){if(n<0||o<0)throw new Ce.ErrnoError(28);if(Ce.isClosed(e))throw new Ce.ErrnoError(8);if(1==(2097155&e.flags))throw new Ce.ErrnoError(8);if(Ce.isDir(e.node.mode))throw new Ce.ErrnoError(31);if(!e.stream_ops.read)throw new Ce.ErrnoError(28);var i=void 0!==o;if(i){if(!e.seekable)throw new Ce.ErrnoError(70)}else o=e.position;var a=e.stream_ops.read(e,t,r,n,o);return i||(e.position+=a),a},write:function(e,t,r,n,o,i){if(n<0||o<0)throw new Ce.ErrnoError(28);if(Ce.isClosed(e))throw new Ce.ErrnoError(8);if(!(2097155&e.flags))throw new Ce.ErrnoError(8);if(Ce.isDir(e.node.mode))throw new Ce.ErrnoError(31);if(!e.stream_ops.write)throw new Ce.ErrnoError(28);e.seekable&&1024&e.flags&&Ce.llseek(e,0,2);var a=void 0!==o;if(a){if(!e.seekable)throw new Ce.ErrnoError(70)}else o=e.position;var s=e.stream_ops.write(e,t,r,n,o,i);return a||(e.position+=s),s},allocate:function(e,t,r){if(Ce.isClosed(e))throw new Ce.ErrnoError(8);if(t<0||r<=0)throw new Ce.ErrnoError(28);if(!(2097155&e.flags))throw new Ce.ErrnoError(8);if(!Ce.isFile(e.node.mode)&&!Ce.isDir(e.node.mode))throw new Ce.ErrnoError(43);if(!e.stream_ops.allocate)throw new Ce.ErrnoError(138);e.stream_ops.allocate(e,t,r)},mmap:function(e,t,r,n,o,i){if(2&o&&!(2&i)&&2!=(2097155&e.flags))throw new Ce.ErrnoError(2);if(1==(2097155&e.flags))throw new Ce.ErrnoError(2);if(!e.stream_ops.mmap)throw new Ce.ErrnoError(43);return e.stream_ops.mmap(e,t,r,n,o,i)},msync:function(e,t,r,n,o){return e&&e.stream_ops.msync?e.stream_ops.msync(e,t,r,n,o):0},munmap:function(e){return 0},ioctl:function(e,t,r){if(!e.stream_ops.ioctl)throw new Ce.ErrnoError(59);return e.stream_ops.ioctl(e,t,r)},readFile:function(e,t){if((t=t||{}).flags=t.flags||0,t.encoding=t.encoding||"binary","utf8"!==t.encoding&&"binary"!==t.encoding)throw new Error('Invalid encoding type "'+t.encoding+'"');var r,n=Ce.open(e,t.flags),o=Ce.stat(e).size,i=new Uint8Array(o);return Ce.read(n,i,0,o,0),"utf8"===t.encoding?r=x(i,0):"binary"===t.encoding&&(r=i),Ce.close(n),r},writeFile:function(e,t,r){(r=r||{}).flags=r.flags||577;var n=Ce.open(e,r.flags,r.mode);if("string"==typeof t){var o=new Uint8Array(k(t)+1),i=P(t,o,0,o.length);Ce.write(n,o,0,i,void 0,r.canOwn)}else{if(!ArrayBuffer.isView(t))throw new Error("Unsupported data type");Ce.write(n,t,0,t.byteLength,void 0,r.canOwn)}Ce.close(n)},cwd:function(){return Ce.currentPath},chdir:function(e){var t=Ce.lookupPath(e,{follow:!0});if(null===t.node)throw new Ce.ErrnoError(44);if(!Ce.isDir(t.node.mode))throw new Ce.ErrnoError(54);var r=Ce.nodePermissions(t.node,"x");if(r)throw new Ce.ErrnoError(r);Ce.currentPath=t.path},createDefaultDirectories:function(){Ce.mkdir("/tmp"),Ce.mkdir("/home"),Ce.mkdir("/home/web_user")},createDefaultDevices:function(){Ce.mkdir("/dev"),Ce.registerDevice(Ce.makedev(1,3),{read:function(){return 0},write:function(e,t,r,n,o){return n}}),Ce.mkdev("/dev/null",Ce.makedev(1,3)),be.register(Ce.makedev(5,0),be.default_tty_ops),be.register(Ce.makedev(6,0),be.default_tty1_ops),Ce.mkdev("/dev/tty",Ce.makedev(5,0)),Ce.mkdev("/dev/tty1",Ce.makedev(6,0));var e=function(){if("object"==typeof crypto&&"function"==typeof crypto.getRandomValues){var e=new Uint8Array(1);return function(){return crypto.getRandomValues(e),e[0]}}return function(){de("randomDevice")}}();Ce.createDevice("/dev","random",e),Ce.createDevice("/dev","urandom",e),Ce.mkdir("/dev/shm"),Ce.mkdir("/dev/shm/tmp")},createSpecialDirectories:function(){Ce.mkdir("/proc");var e=Ce.mkdir("/proc/self");Ce.mkdir("/proc/self/fd"),Ce.mount({mount:function(){var t=Ce.createNode(e,"fd",16895,73);return t.node_ops={lookup:function(e,t){var r=+t,n=Ce.getStream(r);if(!n)throw new Ce.ErrnoError(8);var o={parent:null,mount:{mountpoint:"fake"},node_ops:{readlink:function(){return n.path}}};return o.parent=o,o}},t}},{},"/proc/self/fd")},createStandardStreams:function(){n.stdin?Ce.createDevice("/dev","stdin",n.stdin):Ce.symlink("/dev/tty","/dev/stdin"),n.stdout?Ce.createDevice("/dev","stdout",null,n.stdout):Ce.symlink("/dev/tty","/dev/stdout"),n.stderr?Ce.createDevice("/dev","stderr",null,n.stderr):Ce.symlink("/dev/tty1","/dev/stderr"),Ce.open("/dev/stdin",0),Ce.open("/dev/stdout",1),Ce.open("/dev/stderr",1)},ensureErrnoError:function(){Ce.ErrnoError||(Ce.ErrnoError=function(e,t){this.node=t,this.setErrno=function(e){this.errno=e},this.setErrno(e),this.message="FS error"},Ce.ErrnoError.prototype=new Error,Ce.ErrnoError.prototype.constructor=Ce.ErrnoError,[44].forEach((function(e){Ce.genericErrors[e]=new Ce.ErrnoError(e),Ce.genericErrors[e].stack="<generic error, no stack>"})))},staticInit:function(){Ce.ensureErrnoError(),Ce.nameTable=new Array(4096),Ce.mount(xe,{},"/"),Ce.createDefaultDirectories(),Ce.createDefaultDevices(),Ce.createSpecialDirectories(),Ce.filesystems={MEMFS:xe}},init:function(e,t,r){Ce.init.initialized=!0,Ce.ensureErrnoError(),n.stdin=e||n.stdin,n.stdout=t||n.stdout,n.stderr=r||n.stderr,Ce.createStandardStreams()},quit:function(){Ce.init.initialized=!1;var e=n._fflush;e&&e(0);for(var t=0;t<Ce.streams.length;t++){var r=Ce.streams[t];r&&Ce.close(r)}},getMode:function(e,t){var r=0;return e&&(r|=365),t&&(r|=146),r},findObject:function(e,t){var r=Ce.analyzePath(e,t);return r.exists?r.object:null},analyzePath:function(e,t){try{e=(n=Ce.lookupPath(e,{follow:!t})).path}catch(e){}var r={isRoot:!1,exists:!1,error:0,name:null,path:null,object:null,parentExists:!1,parentPath:null,parentObject:null};try{var n=Ce.lookupPath(e,{parent:!0});r.parentExists=!0,r.parentPath=n.path,r.parentObject=n.node,r.name=we.basename(e),n=Ce.lookupPath(e,{follow:!t}),r.exists=!0,r.path=n.path,r.object=n.node,r.name=n.node.name,r.isRoot="/"===n.path}catch(e){r.error=e.errno}return r},createPath:function(e,t,r,n){e="string"==typeof e?e:Ce.getPath(e);for(var o=t.split("/").reverse();o.length;){var i=o.pop();if(i){var a=we.join2(e,i);try{Ce.mkdir(a)}catch(e){}e=a}}return a},createFile:function(e,t,r,n,o){var i=we.join2("string"==typeof e?e:Ce.getPath(e),t),a=Ce.getMode(n,o);return Ce.create(i,a)},createDataFile:function(e,t,r,n,o,i){var a=t?we.join2("string"==typeof e?e:Ce.getPath(e),t):e,s=Ce.getMode(n,o),l=Ce.create(a,s);if(r){if("string"==typeof r){for(var u=new Array(r.length),c=0,d=r.length;c<d;++c)u[c]=r.charCodeAt(c);r=u}Ce.chmod(l,146|s);var f=Ce.open(l,577);Ce.write(f,r,0,r.length,0,i),Ce.close(f),Ce.chmod(l,s)}return l},createDevice:function(e,t,r,n){var o=we.join2("string"==typeof e?e:Ce.getPath(e),t),i=Ce.getMode(!!r,!!n);Ce.createDevice.major||(Ce.createDevice.major=64);var a=Ce.makedev(Ce.createDevice.major++,0);return Ce.registerDevice(a,{open:function(e){e.seekable=!1},close:function(e){n&&n.buffer&&n.buffer.length&&n(10)},read:function(e,t,n,o,i){for(var a=0,s=0;s<o;s++){var l;try{l=r()}catch(e){throw new Ce.ErrnoError(29)}if(void 0===l&&0===a)throw new Ce.ErrnoError(6);if(null==l)break;a++,t[n+s]=l}return a&&(e.node.timestamp=Date.now()),a},write:function(e,t,r,o,i){for(var a=0;a<o;a++)try{n(t[r+a])}catch(e){throw new Ce.ErrnoError(29)}return o&&(e.node.timestamp=Date.now()),a}}),Ce.mkdev(o,i,a)},forceLoadFile:function(e){if(e.isDevice||e.isFolder||e.link||e.contents)return!0;if("undefined"!=typeof XMLHttpRequest)throw new Error("Lazy loading should have been performed (contents set) in createLazyFile, but it was not. Lazy loading only works in web workers. Use --embed-file or --preload-file in emcc on the main thread.");if(!s)throw new Error("Cannot load without read() or XMLHttpRequest.");try{e.contents=yr(s(e.url),!0),e.usedBytes=e.contents.length}catch(e){throw new Ce.ErrnoError(29)}},createLazyFile:function(e,t,r,n,o){function i(){this.lengthKnown=!1,this.chunks=[]}if(i.prototype.get=function(e){if(!(e>this.length-1||e<0)){var t=e%this.chunkSize,r=e/this.chunkSize|0;return this.getter(r)[t]}},i.prototype.setDataGetter=function(e){this.getter=e},i.prototype.cacheLength=function(){var e=new XMLHttpRequest;if(e.open("HEAD",r,!1),e.send(null),!(e.status>=200&&e.status<300||304===e.status))throw new Error("Couldn't load "+r+". Status: "+e.status);var t,n=Number(e.getResponseHeader("Content-length")),o=(t=e.getResponseHeader("Accept-Ranges"))&&"bytes"===t,i=(t=e.getResponseHeader("Content-Encoding"))&&"gzip"===t,a=1048576;o||(a=n);var s=this;s.setDataGetter((function(e){var t=e*a,o=(e+1)*a-1;if(o=Math.min(o,n-1),void 0===s.chunks[e]&&(s.chunks[e]=function(e,t){if(e>t)throw new Error("invalid range ("+e+", "+t+") or no bytes requested!");if(t>n-1)throw new Error("only "+n+" bytes available! programmer error!");var o=new XMLHttpRequest;if(o.open("GET",r,!1),n!==a&&o.setRequestHeader("Range","bytes="+e+"-"+t),"undefined"!=typeof Uint8Array&&(o.responseType="arraybuffer"),o.overrideMimeType&&o.overrideMimeType("text/plain; charset=x-user-defined"),o.send(null),!(o.status>=200&&o.status<300||304===o.status))throw new Error("Couldn't load "+r+". Status: "+o.status);return void 0!==o.response?new Uint8Array(o.response||[]):yr(o.responseText||"",!0)}(t,o)),void 0===s.chunks[e])throw new Error("doXHR failed!");return s.chunks[e]})),!i&&n||(a=n=1,n=this.getter(0).length,a=n,h("LazyFiles on gzip forces download of the whole file when length is accessed")),this._length=n,this._chunkSize=a,this.lengthKnown=!0},"undefined"!=typeof XMLHttpRequest)throw"Cannot do synchronous binary XHRs outside webworkers in modern browsers. Use --embed-file or --preload-file in emcc";var a={isDevice:!1,url:r},s=Ce.createFile(e,t,a,n,o);a.contents?s.contents=a.contents:a.url&&(s.contents=null,s.url=a.url),Object.defineProperties(s,{usedBytes:{get:function(){return this.contents.length}}});var l={};return Object.keys(s.stream_ops).forEach((function(e){var t=s.stream_ops[e];l[e]=function(){return Ce.forceLoadFile(s),t.apply(null,arguments)}})),l.read=function(e,t,r,n,o){Ce.forceLoadFile(s);var i=e.node.contents;if(o>=i.length)return 0;var a=Math.min(i.length-o,n);if(i.slice)for(var l=0;l<a;l++)t[r+l]=i[o+l];else for(l=0;l<a;l++)t[r+l]=i.get(o+l);return a},s.stream_ops=l,s},createPreloadedFile:function(e,t,r,o,i,a,s,u,c,d){Browser.init();var f=t?Ee.resolve(we.join2(e,t)):e;function m(r){function l(r){d&&d(),u||Ce.createDataFile(e,t,r,o,i,c),a&&a(),ce()}var m=!1;n.preloadPlugins.forEach((function(e){m||e.canHandle(f)&&(e.handle(r,f,l,(function(){s&&s(),ce()})),m=!0)})),m||l(r)}ue(),"string"==typeof r?function(e,t,r){var n="al "+e;l(e,(function(t){_(t,'Loading data file "'+e+'" failed (no arrayBuffer).'),m(new Uint8Array(t)),n&&ce()}),(function(t){if(!r)throw'Loading data file "'+e+'" failed.';r()})),n&&ue()}(r,0,s):m(r)},indexedDB:function(){return window.indexedDB||window.mozIndexedDB||window.webkitIndexedDB||window.msIndexedDB},DB_NAME:function(){return"EM_FS_"+window.location.pathname},DB_VERSION:20,DB_STORE_NAME:"FILE_DATA",saveFilesToDB:function(e,t,r){t=t||function(){},r=r||function(){};var n=Ce.indexedDB();try{var o=n.open(Ce.DB_NAME(),Ce.DB_VERSION)}catch(e){return r(e)}o.onupgradeneeded=function(){h("creating db"),o.result.createObjectStore(Ce.DB_STORE_NAME)},o.onsuccess=function(){var n=o.result.transaction([Ce.DB_STORE_NAME],"readwrite"),i=n.objectStore(Ce.DB_STORE_NAME),a=0,s=0,l=e.length;function u(){0==s?t():r()}e.forEach((function(e){var t=i.put(Ce.analyzePath(e).object.contents,e);t.onsuccess=function(){++a+s==l&&u()},t.onerror=function(){s++,a+s==l&&u()}})),n.onerror=r},o.onerror=r},loadFilesFromDB:function(e,t,r){t=t||function(){},r=r||function(){};var n=Ce.indexedDB();try{var o=n.open(Ce.DB_NAME(),Ce.DB_VERSION)}catch(e){return r(e)}o.onupgradeneeded=r,o.onsuccess=function(){var n=o.result;try{var i=n.transaction([Ce.DB_STORE_NAME],"readonly")}catch(e){return void r(e)}var a=i.objectStore(Ce.DB_STORE_NAME),s=0,l=0,u=e.length;function c(){0==l?t():r()}e.forEach((function(e){var t=a.get(e);t.onsuccess=function(){Ce.analyzePath(e).exists&&Ce.unlink(e),Ce.createDataFile(we.dirname(e),we.basename(e),t.result,!0,!0,!0),++s+l==u&&c()},t.onerror=function(){l++,s+l==u&&c()}})),i.onerror=r},o.onerror=r}},Pe={mappings:{},DEFAULT_POLLMASK:5,calculateAt:function(e,t,r){if("/"===t[0])return t;var n;if(-100===e)n=Ce.cwd();else{var o=Ce.getStream(e);if(!o)throw new Ce.ErrnoError(8);n=o.path}if(0==t.length){if(!r)throw new Ce.ErrnoError(44);return n}return we.join2(n,t)},doStat:function(e,t,r){try{var n=e(t)}catch(e){if(e&&e.node&&we.normalize(t)!==we.normalize(Ce.getPath(e.node)))return-54;throw e}return M[r>>2]=n.dev,M[r+4>>2]=0,M[r+8>>2]=n.ino,M[r+12>>2]=n.mode,M[r+16>>2]=n.nlink,M[r+20>>2]=n.uid,M[r+24>>2]=n.gid,M[r+28>>2]=n.rdev,M[r+32>>2]=0,ie=[n.size>>>0,(oe=n.size,+Math.abs(oe)>=1?oe>0?(0|Math.min(+Math.floor(oe/4294967296),4294967295))>>>0:~~+Math.ceil((oe-+(~~oe>>>0))/4294967296)>>>0:0)],M[r+40>>2]=ie[0],M[r+44>>2]=ie[1],M[r+48>>2]=4096,M[r+52>>2]=n.blocks,M[r+56>>2]=n.atime.getTime()/1e3|0,M[r+60>>2]=0,M[r+64>>2]=n.mtime.getTime()/1e3|0,M[r+68>>2]=0,M[r+72>>2]=n.ctime.getTime()/1e3|0,M[r+76>>2]=0,ie=[n.ino>>>0,(oe=n.ino,+Math.abs(oe)>=1?oe>0?(0|Math.min(+Math.floor(oe/4294967296),4294967295))>>>0:~~+Math.ceil((oe-+(~~oe>>>0))/4294967296)>>>0:0)],M[r+80>>2]=ie[0],M[r+84>>2]=ie[1],0},doMsync:function(e,t,r,n,o){var i=L.slice(e,e+r);Ce.msync(t,i,o,r,n)},doMkdir:function(e,t){return"/"===(e=we.normalize(e))[e.length-1]&&(e=e.substr(0,e.length-1)),Ce.mkdir(e,t,0),0},doMknod:function(e,t,r){switch(61440&t){case 32768:case 8192:case 24576:case 4096:case 49152:break;default:return-28}return Ce.mknod(e,t,r),0},doReadlink:function(e,t,r){if(r<=0)return-28;var n=Ce.readlink(e),o=Math.min(r,k(n)),i=A[t+o];return S(n,t,r+1),A[t+o]=i,o},doAccess:function(e,t){if(-8&t)return-28;var r;if(!(r=Ce.lookupPath(e,{follow:!0}).node))return-44;var n="";return 4&t&&(n+="r"),2&t&&(n+="w"),1&t&&(n+="x"),n&&Ce.nodePermissions(r,n)?-2:0},doDup:function(e,t,r){var n=Ce.getStream(r);return n&&Ce.close(n),Ce.open(e,t,0,r,r).fd},doReadv:function(e,t,r,n){for(var o=0,i=0;i<r;i++){var a=M[t+8*i>>2],s=M[t+(8*i+4)>>2],l=Ce.read(e,A,a,s,n);if(l<0)return-1;if(o+=l,l<s)break}return o},doWritev:function(e,t,r,n){for(var o=0,i=0;i<r;i++){var a=M[t+8*i>>2],s=M[t+(8*i+4)>>2],l=Ce.write(e,A,a,s,n);if(l<0)return-1;o+=l}return o},varargs:void 0,get:function(){return Pe.varargs+=4,M[Pe.varargs-4>>2]},getStr:function(e){return C(e)},getStreamFromFD:function(e){var t=Ce.getStream(e);if(!t)throw new Ce.ErrnoError(8);return t},get64:function(e,t){return e}};function Se(e){return M[xr()>>2]=e,e}function ke(e){switch(e){case 1:return 0;case 2:return 1;case 4:return 2;case 8:return 3;default:throw new TypeError("Unknown type size: "+e)}}var Te=void 0;function De(e){for(var t="",r=e;L[r];)t+=Te[L[r++]];return t}var Ae={},Le={},Ie={};function Re(e){if(void 0===e)return"_unknown";var t=(e=e.replace(/[^a-zA-Z0-9_]/g,"$")).charCodeAt(0);return t>=48&&t<=57?"_"+e:e}function Me(e,t){return e=Re(e),new Function("body","return function "+e+'() {\n    "use strict";    return body.apply(this, arguments);\n};\n')(t)}function Fe(e,t){var r=Me(t,(function(e){this.name=t,this.message=e;var r=new Error(e).stack;void 0!==r&&(this.stack=this.toString()+"\n"+r.replace(/^Error(:[^\n]*)?\n/,""))}));return r.prototype=Object.create(e.prototype),r.prototype.constructor=r,r.prototype.toString=function(){return void 0===this.message?this.name:this.name+": "+this.message},r}var Oe=void 0;function Be(e){throw new Oe(e)}var Ne=void 0;function $e(e){throw new Ne(e)}function je(e,t,r){function n(t){var n=r(t);n.length!==e.length&&$e("Mismatched type converter count");for(var o=0;o<e.length;++o)ze(e[o],n[o])}e.forEach((function(e){Ie[e]=t}));var o=new Array(t.length),i=[],a=0;t.forEach((function(e,t){Le.hasOwnProperty(e)?o[t]=Le[e]:(i.push(e),Ae.hasOwnProperty(e)||(Ae[e]=[]),Ae[e].push((function(){o[t]=Le[e],++a===i.length&&n(o)})))})),0===i.length&&n(o)}function ze(e,t,r){if(r=r||{},!("argPackAdvance"in t))throw new TypeError("registerType registeredInstance requires argPackAdvance");var n=t.name;if(e||Be('type "'+n+'" must have a positive integer typeid pointer'),Le.hasOwnProperty(e)){if(r.ignoreDuplicateRegistrations)return;Be("Cannot register type '"+n+"' twice")}if(Le[e]=t,delete Ie[e],Ae.hasOwnProperty(e)){var o=Ae[e];delete Ae[e],o.forEach((function(e){e()}))}}function Ue(e){Be(e.$$.ptrType.registeredClass.name+" instance already deleted")}var Ge=!1;function We(e){}function He(e){e.count.value-=1,0===e.count.value&&function(e){e.smartPtr?e.smartPtrType.rawDestructor(e.smartPtr):e.ptrType.registeredClass.rawDestructor(e.ptr)}(e)}function Ve(e){return"undefined"==typeof FinalizationGroup?(Ve=function(e){return e},e):(Ge=new FinalizationGroup((function(e){for(var t=e.next();!t.done;t=e.next()){var r=t.value;r.ptr?He(r):console.warn("object already deleted: "+r.ptr)}})),Ve=function(e){return Ge.register(e,e.$$,e.$$),e},We=function(e){Ge.unregister(e.$$)},Ve(e))}var Ye=void 0,qe=[];function Ke(){for(;qe.length;){var e=qe.pop();e.$$.deleteScheduled=!1,e.delete()}}function Xe(){}var Ze={};function Qe(e,t,r){if(void 0===e[t].overloadTable){var n=e[t];e[t]=function(){return e[t].overloadTable.hasOwnProperty(arguments.length)||Be("Function '"+r+"' called with an invalid number of arguments ("+arguments.length+") - expects one of ("+e[t].overloadTable+")!"),e[t].overloadTable[arguments.length].apply(this,arguments)},e[t].overloadTable=[],e[t].overloadTable[n.argCount]=n}}function Je(e,t,r){n.hasOwnProperty(e)?((void 0===r||void 0!==n[e].overloadTable&&void 0!==n[e].overloadTable[r])&&Be("Cannot register public name '"+e+"' twice"),Qe(n,e,e),n.hasOwnProperty(r)&&Be("Cannot register multiple overloads of a function with the same number of arguments ("+r+")!"),n[e].overloadTable[r]=t):(n[e]=t,void 0!==r&&(n[e].numArguments=r))}function et(e,t,r,n,o,i,a,s){this.name=e,this.constructor=t,this.instancePrototype=r,this.rawDestructor=n,this.baseClass=o,this.getActualType=i,this.upcast=a,this.downcast=s,this.pureVirtualFunctions=[]}function tt(e,t,r){for(;t!==r;)t.upcast||Be("Expected null or instance of "+r.name+", got an instance of "+t.name),e=t.upcast(e),t=t.baseClass;return e}function rt(e,t){if(null===t)return this.isReference&&Be("null is not a valid "+this.name),0;t.$$||Be('Cannot pass "'+St(t)+'" as a '+this.name),t.$$.ptr||Be("Cannot pass deleted object as a pointer of type "+this.name);var r=t.$$.ptrType.registeredClass;return tt(t.$$.ptr,r,this.registeredClass)}function nt(e,t){var r;if(null===t)return this.isReference&&Be("null is not a valid "+this.name),this.isSmartPointer?(r=this.rawConstructor(),null!==e&&e.push(this.rawDestructor,r),r):0;t.$$||Be('Cannot pass "'+St(t)+'" as a '+this.name),t.$$.ptr||Be("Cannot pass deleted object as a pointer of type "+this.name),!this.isConst&&t.$$.ptrType.isConst&&Be("Cannot convert argument of type "+(t.$$.smartPtrType?t.$$.smartPtrType.name:t.$$.ptrType.name)+" to parameter type "+this.name);var n=t.$$.ptrType.registeredClass;if(r=tt(t.$$.ptr,n,this.registeredClass),this.isSmartPointer)switch(void 0===t.$$.smartPtr&&Be("Passing raw pointer to smart pointer is illegal"),this.sharingPolicy){case 0:t.$$.smartPtrType===this?r=t.$$.smartPtr:Be("Cannot convert argument of type "+(t.$$.smartPtrType?t.$$.smartPtrType.name:t.$$.ptrType.name)+" to parameter type "+this.name);break;case 1:r=t.$$.smartPtr;break;case 2:if(t.$$.smartPtrType===this)r=t.$$.smartPtr;else{var o=t.clone();r=this.rawShare(r,xt.toHandle((function(){o.delete()}))),null!==e&&e.push(this.rawDestructor,r)}break;default:Be("Unsupporting sharing policy")}return r}function ot(e,t){if(null===t)return this.isReference&&Be("null is not a valid "+this.name),0;t.$$||Be('Cannot pass "'+St(t)+'" as a '+this.name),t.$$.ptr||Be("Cannot pass deleted object as a pointer of type "+this.name),t.$$.ptrType.isConst&&Be("Cannot convert argument of type "+t.$$.ptrType.name+" to parameter type "+this.name);var r=t.$$.ptrType.registeredClass;return tt(t.$$.ptr,r,this.registeredClass)}function it(e){return this.fromWireType(F[e>>2])}function at(e,t,r){if(t===r)return e;if(void 0===r.baseClass)return null;var n=at(e,t,r.baseClass);return null===n?null:r.downcast(n)}var st={};function lt(e,t){return t.ptrType&&t.ptr||$e("makeClassHandle requires ptr and ptrType"),!!t.smartPtrType!=!!t.smartPtr&&$e("Both smartPtrType and smartPtr must be specified"),t.count={value:1},Ve(Object.create(e,{$$:{value:t}}))}function ut(e,t,r,n,o,i,a,s,l,u,c){this.name=e,this.registeredClass=t,this.isReference=r,this.isConst=n,this.isSmartPointer=o,this.pointeeType=i,this.sharingPolicy=a,this.rawGetPointee=s,this.rawConstructor=l,this.rawShare=u,this.rawDestructor=c,o||void 0!==t.baseClass?this.toWireType=nt:n?(this.toWireType=rt,this.destructorFunction=null):(this.toWireType=ot,this.destructorFunction=null)}function ct(e,t,r){n.hasOwnProperty(e)||$e("Replacing nonexistant public symbol"),void 0!==n[e].overloadTable&&void 0!==r?n[e].overloadTable[r]=t:(n[e]=t,n[e].argCount=r)}function dt(e,t){var r,o,i,a=(e=De(e)).includes("j")?(r=e,o=t,i=[],function(){i.length=arguments.length;for(var e=0;e<arguments.length;e++)i[e]=arguments[e];return function(e,t,r){return e.includes("j")?function(e,t,r){var o=n["dynCall_"+e];return r&&r.length?o.apply(null,[t].concat(r)):o.call(null,t)}(e,t,r):ve(t).apply(null,r)}(r,o,i)}):ve(t);return"function"!=typeof a&&Be("unknown function pointer with signature "+e+": "+t),a}var ft=void 0;function mt(e){var t=Cr(e),r=De(t);return br(t),r}function ht(e,t){var r=[],n={};throw t.forEach((function e(t){n[t]||Le[t]||(Ie[t]?Ie[t].forEach(e):(r.push(t),n[t]=!0))})),new ft(e+": "+r.map(mt).join([", "]))}function pt(e){for(;e.length;){var t=e.pop();e.pop()(t)}}function gt(e,t,r,n,o){var i=t.length;i<2&&Be("argTypes array size mismatch! Must at least get return value and 'this' types!");for(var a=null!==t[1]&&null!==r,s=!1,l=1;l<t.length;++l)if(null!==t[l]&&void 0===t[l].destructorFunction){s=!0;break}var u="void"!==t[0].name,c="",d="";for(l=0;l<i-2;++l)c+=(0!==l?", ":"")+"arg"+l,d+=(0!==l?", ":"")+"arg"+l+"Wired";var f="return function "+Re(e)+"("+c+") {\nif (arguments.length !== "+(i-2)+") {\nthrowBindingError('function "+e+" called with ' + arguments.length + ' arguments, expected "+(i-2)+" args!');\n}\n";s&&(f+="var destructors = [];\n");var m=s?"destructors":"null",h=["throwBindingError","invoker","fn","runDestructors","retType","classParam"],p=[Be,n,o,pt,t[0],t[1]];for(a&&(f+="var thisWired = classParam.toWireType("+m+", this);\n"),l=0;l<i-2;++l)f+="var arg"+l+"Wired = argType"+l+".toWireType("+m+", arg"+l+"); // "+t[l+2].name+"\n",h.push("argType"+l),p.push(t[l+2]);if(a&&(d="thisWired"+(d.length>0?", ":"")+d),f+=(u?"var rv = ":"")+"invoker(fn"+(d.length>0?", ":"")+d+");\n",s)f+="runDestructors(destructors);\n";else for(l=a?1:2;l<t.length;++l){var g=1===l?"thisWired":"arg"+(l-2)+"Wired";null!==t[l].destructorFunction&&(f+=g+"_dtor("+g+"); // "+t[l].name+"\n",h.push(g+"_dtor"),p.push(t[l].destructorFunction))}return u&&(f+="var ret = retType.fromWireType(rv);\nreturn ret;\n"),f+="}\n",h.push(f),function(e,t){if(!(e instanceof Function))throw new TypeError("new_ called with constructor type "+typeof e+" which is not a function");var r=Me(e.name||"unknownFunctionName",(function(){}));r.prototype=e.prototype;var n=new r,o=e.apply(n,t);return o instanceof Object?o:n}(Function,h).apply(null,p)}function vt(e,t){for(var r=[],n=0;n<e;n++)r.push(M[(t>>2)+n]);return r}function yt(e,t,r){return e instanceof Object||Be(r+' with invalid "this": '+e),e instanceof t.registeredClass.constructor||Be(r+' incompatible with "this" of type '+e.constructor.name),e.$$.ptr||Be("cannot call emscripten binding method "+r+" on deleted object"),tt(e.$$.ptr,e.$$.ptrType.registeredClass,t.registeredClass)}var _t=[],wt=[{},{value:void 0},{value:null},{value:!0},{value:!1}];function Et(e){e>4&&0==--wt[e].refcount&&(wt[e]=void 0,_t.push(e))}var bt,xt={toValue:function(e){return e||Be("Cannot use deleted val. handle = "+e),wt[e].value},toHandle:function(e){switch(e){case void 0:return 1;case null:return 2;case!0:return 3;case!1:return 4;default:var t=_t.length?_t.pop():wt.length;return wt[t]={refcount:1,value:e},t}}};function Ct(e,t,r){switch(t){case 0:return function(e){var t=r?A:L;return this.fromWireType(t[e])};case 1:return function(e){var t=r?I:R;return this.fromWireType(t[e>>1])};case 2:return function(e){var t=r?M:F;return this.fromWireType(t[e>>2])};default:throw new TypeError("Unknown integer type: "+e)}}function Pt(e,t){var r=Le[e];return void 0===r&&Be(t+" has unknown type "+mt(e)),r}function St(e){if(null===e)return"null";var t=typeof e;return"object"===t||"array"===t||"function"===t?e.toString():""+e}function kt(e,t){switch(t){case 2:return function(e){return this.fromWireType(O[e>>2])};case 3:return function(e){return this.fromWireType(B[e>>3])};default:throw new TypeError("Unknown float type: "+e)}}function Tt(e,t,r){switch(t){case 0:return r?function(e){return A[e]}:function(e){return L[e]};case 1:return r?function(e){return I[e>>1]}:function(e){return R[e>>1]};case 2:return r?function(e){return M[e>>2]}:function(e){return F[e>>2]};default:throw new TypeError("Unknown integer type: "+e)}}bt=function(){return performance.now()};var Dt=[],At={inEventHandler:0,removeAllEventListeners:function(){for(var e=At.eventHandlers.length-1;e>=0;--e)At._removeHandler(e);At.eventHandlers=[],At.deferredCalls=[]},registerRemoveEventListeners:function(){At.removeEventListenersRegistered||(Q.push(At.removeAllEventListeners),At.removeEventListenersRegistered=!0)},deferredCalls:[],deferCall:function(e,t,r){function n(e,t){if(e.length!=t.length)return!1;for(var r in e)if(e[r]!=t[r])return!1;return!0}for(var o in At.deferredCalls){var i=At.deferredCalls[o];if(i.targetFunction==e&&n(i.argsList,r))return}At.deferredCalls.push({targetFunction:e,precedence:t,argsList:r}),At.deferredCalls.sort((function(e,t){return e.precedence<t.precedence}))},removeDeferredCalls:function(e){for(var t=0;t<At.deferredCalls.length;++t)At.deferredCalls[t].targetFunction==e&&(At.deferredCalls.splice(t,1),--t)},canPerformEventHandlerRequests:function(){return At.inEventHandler&&At.currentEventHandler.allowsDeferredCalls},runDeferredCalls:function(){if(At.canPerformEventHandlerRequests())for(var e=0;e<At.deferredCalls.length;++e){var t=At.deferredCalls[e];At.deferredCalls.splice(e,1),--e,t.targetFunction.apply(null,t.argsList)}},eventHandlers:[],removeAllHandlersOnTarget:function(e,t){for(var r=0;r<At.eventHandlers.length;++r)At.eventHandlers[r].target!=e||t&&t!=At.eventHandlers[r].eventTypeString||At._removeHandler(r--)},_removeHandler:function(e){var t=At.eventHandlers[e];t.target.removeEventListener(t.eventTypeString,t.eventListenerFunc,t.useCapture),At.eventHandlers.splice(e,1)},registerOrRemoveHandler:function(e){var t=function(t){++At.inEventHandler,At.currentEventHandler=e,At.runDeferredCalls(),e.handlerFunc(t),At.runDeferredCalls(),--At.inEventHandler};if(e.callbackfunc)e.eventListenerFunc=t,e.target.addEventListener(e.eventTypeString,t,e.useCapture),At.eventHandlers.push(e),At.registerRemoveEventListeners();else for(var r=0;r<At.eventHandlers.length;++r)At.eventHandlers[r].target==e.target&&At.eventHandlers[r].eventTypeString==e.eventTypeString&&At._removeHandler(r--)},getNodeNameForTarget:function(e){return e?e==window?"#window":e==screen?"#screen":e&&e.nodeName?e.nodeName:"":""},fullscreenEnabled:function(){return document.fullscreenEnabled||document.webkitFullscreenEnabled}},Lt=[0,document,window];function It(e){var t;return e=(t=e)>2?C(t):t,Lt[e]||document.querySelector(e)}function Rt(e){return It(e)}function Mt(e){return Lt.indexOf(e)<0?e.getBoundingClientRect():{left:0,top:0}}function Ft(e,t,r,n,o,i,a){At.keyEvent||(At.keyEvent=Er(176));var s={target:It(e),allowsDeferredCalls:!0,eventTypeString:i,callbackfunc:n,handlerFunc:function(e){var r=At.keyEvent;B[r>>3]=e.timeStamp;var i=r>>2;M[i+2]=e.location,M[i+3]=e.ctrlKey,M[i+4]=e.shiftKey,M[i+5]=e.altKey,M[i+6]=e.metaKey,M[i+7]=e.repeat,M[i+8]=e.charCode,M[i+9]=e.keyCode,M[i+10]=e.which,S(e.key||"",r+44,32),S(e.code||"",r+76,32),S(e.char||"",r+108,32),S(e.locale||"",r+140,32),ve(n)(o,r,t)&&e.preventDefault()},useCapture:r};At.registerOrRemoveHandler(s)}function Ot(e,t,r){B[e>>3]=t.timeStamp;var n=e>>2;M[n+2]=t.screenX,M[n+3]=t.screenY,M[n+4]=t.clientX,M[n+5]=t.clientY,M[n+6]=t.ctrlKey,M[n+7]=t.shiftKey,M[n+8]=t.altKey,M[n+9]=t.metaKey,I[2*n+20]=t.button,I[2*n+21]=t.buttons,M[n+11]=t.movementX,M[n+12]=t.movementY;var o=Mt(r);M[n+13]=t.clientX-o.left,M[n+14]=t.clientY-o.top}function Bt(e,t,r,n,o,i,a){At.mouseEvent||(At.mouseEvent=Er(72));var s={target:e=It(e),allowsDeferredCalls:"mousemove"!=i&&"mouseenter"!=i&&"mouseleave"!=i,eventTypeString:i,callbackfunc:n,handlerFunc:function(r){var i=r||event;Ot(At.mouseEvent,i,e),ve(n)(o,At.mouseEvent,t)&&i.preventDefault()},useCapture:r};At.registerOrRemoveHandler(s)}var Nt={xhrs:[],setu64:function(e,t){F[e>>2]=t,F[e+4>>2]=t/4294967296|0},openDatabase:function(e,t,r,n){try{var o=indexedDB.open(e,t)}catch(e){return n(e)}o.onupgradeneeded=function(e){var t=e.target.result;t.objectStoreNames.contains("FILES")&&t.deleteObjectStore("FILES"),t.createObjectStore("FILES")},o.onsuccess=function(e){r(e.target.result)},o.onerror=function(e){n(e)}},staticInit:function(){Nt.openDatabase("emscripten_filesystem",1,(function(e){Nt.dbInstance=e,ce()}),(function(){Nt.dbInstance=!1,ce()})),"undefined"!=typeof ENVIRONMENT_IS_FETCH_WORKER&&ENVIRONMENT_IS_FETCH_WORKER||ue()}};function $t(e,t,r,n,o){var i=F[e+8>>2];if(i){var a=C(i),s=e+112,l=C(s);l||(l="GET"),F[e+4>>2];var u=F[s+52>>2],c=F[s+56>>2],d=!!F[s+60>>2],f=(F[s+64>>2],F[s+68>>2]),m=F[s+72>>2],h=F[s+76>>2],p=F[s+80>>2],g=F[s+84>>2],v=F[s+88>>2],y=!!(1&u),_=!!(2&u),w=!!(64&u),E=f?C(f):void 0,b=m?C(m):void 0,x=p?C(p):void 0,P=new XMLHttpRequest;if(P.withCredentials=d,P.open(l,a,!w,E,b),w||(P.timeout=c),P.url_=a,P.responseType="arraybuffer",p&&P.overrideMimeType(x),h)for(;;){var k=F[h>>2];if(!k)break;var T=F[h+4>>2];if(!T)break;h+=8;var D=C(k),A=C(T);P.setRequestHeader(D,A)}Nt.xhrs.push(P);var I=Nt.xhrs.length;F[e+0>>2]=I;var M=g&&v?L.slice(g,g+v):null;P.onload=function(n){O(y&&!_);var o=P.response?P.response.byteLength:0;Nt.setu64(e+24,0),o&&Nt.setu64(e+32,o),R[e+40>>1]=P.readyState,R[e+42>>1]=P.status,P.statusText&&S(P.statusText,e+44,64),P.status>=200&&P.status<300?t&&t(e,P,n):r&&r(e,P,n)},P.onerror=function(t){O(y);var n=P.status;Nt.setu64(e+24,0),Nt.setu64(e+32,P.response?P.response.byteLength:0),R[e+40>>1]=P.readyState,R[e+42>>1]=n,r&&r(e,P,t)},P.ontimeout=function(t){r&&r(e,P,t)},P.onprogress=function(t){var r=y&&_&&P.response?P.response.byteLength:0,o=0;y&&_&&(o=Er(r),L.set(new Uint8Array(P.response),o)),F[e+12>>2]=o,Nt.setu64(e+16,r),Nt.setu64(e+24,t.loaded-r),Nt.setu64(e+32,t.total),R[e+40>>1]=P.readyState,P.readyState>=3&&0===P.status&&t.loaded>0&&(P.status=200),R[e+42>>1]=P.status,P.statusText&&S(P.statusText,e+44,64),n&&n(e,P,t),o&&br(o)},P.onreadystatechange=function(t){R[e+40>>1]=P.readyState,P.readyState>=2&&(R[e+42>>1]=P.status),o&&o(e,P,t)};try{P.send(M)}catch(t){r&&r(e,P,t)}}else r(e,0,"no url specified!");function O(t){var r=0,n=0;t&&(n=P.response?P.response.byteLength:0,r=Er(n),L.set(new Uint8Array(P.response),r)),F[e+12>>2]=r,Nt.setu64(e+16,n)}}function jt(e,t){if(!ee&&!y)if(t)e();else try{e()}catch(e){ye(e)}}function zt(e,t,r,n,o){if(e){var i=F[t+112+64>>2];i||(i=F[t+8>>2]);var a=C(i);try{var s=e.transaction(["FILES"],"readwrite").objectStore("FILES").put(r,a);s.onsuccess=function(e){R[t+40>>1]=4,R[t+42>>1]=200,S("OK",t+44,64),n(t,0,a)},s.onerror=function(e){R[t+40>>1]=4,R[t+42>>1]=413,S("Payload Too Large",t+44,64),o(t,0,e)}}catch(e){o(t,0,e)}}else o(t,0,"IndexedDB not available!")}function Ut(e){var t=e.getExtension("ANGLE_instanced_arrays");if(t)return e.vertexAttribDivisor=function(e,r){t.vertexAttribDivisorANGLE(e,r)},e.drawArraysInstanced=function(e,r,n,o){t.drawArraysInstancedANGLE(e,r,n,o)},e.drawElementsInstanced=function(e,r,n,o,i){t.drawElementsInstancedANGLE(e,r,n,o,i)},1}function Gt(e){var t=e.getExtension("OES_vertex_array_object");if(t)return e.createVertexArray=function(){return t.createVertexArrayOES()},e.deleteVertexArray=function(e){t.deleteVertexArrayOES(e)},e.bindVertexArray=function(e){t.bindVertexArrayOES(e)},e.isVertexArray=function(e){return t.isVertexArrayOES(e)},1}function Wt(e){var t=e.getExtension("WEBGL_draw_buffers");if(t)return e.drawBuffers=function(e,r){t.drawBuffersWEBGL(e,r)},1}function Ht(e){return!!(e.multiDrawWebgl=e.getExtension("WEBGL_multi_draw"))}var Vt={counter:1,buffers:[],programs:[],framebuffers:[],renderbuffers:[],textures:[],shaders:[],vaos:[],contexts:[],offscreenCanvases:{},queries:[],stringCache:{},unpackAlignment:4,recordError:function(e){Vt.lastError||(Vt.lastError=e)},getNewId:function(e){for(var t=Vt.counter++,r=e.length;r<t;r++)e[r]=null;return t},getSource:function(e,t,r,n){for(var o="",i=0;i<t;++i){var a=n?M[n+4*i>>2]:-1;o+=C(M[r+4*i>>2],a<0?void 0:a)}return o},createContext:function(e,t){e.getContextSafariWebGL2Fixed||(e.getContextSafariWebGL2Fixed=e.getContext,e.getContext=function(t,r){var n=e.getContextSafariWebGL2Fixed(t,r);return"webgl"==t==n instanceof WebGLRenderingContext?n:null});var r=e.getContext("webgl",t);return r?Vt.registerContext(r,t):0},registerContext:function(e,t){var r=Vt.getNewId(Vt.contexts),n={handle:r,attributes:t,version:t.majorVersion,GLctx:e};return e.canvas&&(e.canvas.GLctxObject=n),Vt.contexts[r]=n,(void 0===t.enableExtensionsByDefault||t.enableExtensionsByDefault)&&Vt.initExtensions(n),r},makeContextCurrent:function(e){return Vt.currentContext=Vt.contexts[e],n.ctx=mr=Vt.currentContext&&Vt.currentContext.GLctx,!(e&&!mr)},getContext:function(e){return Vt.contexts[e]},deleteContext:function(e){Vt.currentContext===Vt.contexts[e]&&(Vt.currentContext=null),"object"==typeof At&&At.removeAllHandlersOnTarget(Vt.contexts[e].GLctx.canvas),Vt.contexts[e]&&Vt.contexts[e].GLctx.canvas&&(Vt.contexts[e].GLctx.canvas.GLctxObject=void 0),Vt.contexts[e]=null},initExtensions:function(e){if(e||(e=Vt.currentContext),!e.initExtensionsDone){e.initExtensionsDone=!0;var t=e.GLctx;Ut(t),Gt(t),Wt(t),t.disjointTimerQueryExt=t.getExtension("EXT_disjoint_timer_query"),Ht(t),(t.getSupportedExtensions()||[]).forEach((function(e){e.includes("lose_context")||e.includes("debug")||t.getExtension(e)}))}}},Yt=["default","low-power","high-performance"];function qt(){return Vt.currentContext?Vt.currentContext.handle:0}function Kt(e){return Vt.makeContextCurrent(e)?0:-5}n._emscripten_webgl_get_current_context=qt,n._emscripten_webgl_make_context_current=Kt;var Xt={};function Zt(){if(!Zt.strings){var e={USER:"web_user",LOGNAME:"web_user",PATH:"/",PWD:"/",HOME:"/home/web_user",LANG:("object"==typeof navigator&&navigator.languages&&navigator.languages[0]||"C").replace("-","_")+".UTF-8",_:c||"./this.program"};for(var t in Xt)void 0===Xt[t]?delete e[t]:e[t]=Xt[t];var r=[];for(var t in e)r.push(t+"="+e[t]);Zt.strings=r}return Zt.strings}var Qt=[];function Jt(e,t,r,n){for(var o=0;o<e;o++){var i=mr[r](),a=i&&Vt.getNewId(n);i?(i.name=a,n[a]=i):Vt.recordError(1282),M[t+4*o>>2]=a}}function er(e,t,r){if(t){var n,o,i=void 0;switch(e){case 36346:i=1;break;case 36344:return void(0!=r&&1!=r&&Vt.recordError(1280));case 36345:i=0;break;case 34466:var a=mr.getParameter(34467);i=a?a.length:0}if(void 0===i){var s=mr.getParameter(e);switch(typeof s){case"number":i=s;break;case"boolean":i=s?1:0;break;case"string":return void Vt.recordError(1280);case"object":if(null===s)switch(e){case 34964:case 35725:case 34965:case 36006:case 36007:case 32873:case 34229:case 34068:i=0;break;default:return void Vt.recordError(1280)}else{if(s instanceof Float32Array||s instanceof Uint32Array||s instanceof Int32Array||s instanceof Array){for(var l=0;l<s.length;++l)switch(r){case 0:M[t+4*l>>2]=s[l];break;case 2:O[t+4*l>>2]=s[l];break;case 4:A[t+l|0]=s[l]?1:0}return}try{i=0|s.name}catch(t){return Vt.recordError(1280),void p("GL_INVALID_ENUM in glGet"+r+"v: Unknown object returned from WebGL getParameter("+e+")! (error: "+t+")")}}break;default:return Vt.recordError(1280),void p("GL_INVALID_ENUM in glGet"+r+"v: Native code calling glGet"+r+"v("+e+") and it returns "+s+" of type "+typeof s+"!")}}switch(r){case 1:o=i,F[(n=t)>>2]=o,F[n+4>>2]=(o-F[n>>2])/4294967296;break;case 0:M[t>>2]=i;break;case 2:O[t>>2]=i;break;case 4:A[0|t]=i?1:0}}else Vt.recordError(1281)}function tr(e){var t=k(e)+1,r=Er(t);return S(e,r,t),r}function rr(e){return"]"==e.slice(-1)&&e.lastIndexOf("[")}function nr(e,t,r,n,o,i){var a=function(e){return 1==(e-=5120)?L:4==e?M:6==e?O:5==e||28922==e?F:R}(e),s=function(e){return 31-Math.clz32(e.BYTES_PER_ELEMENT)}(a),l=1<<s,u=function(e){return{5:3,6:4,8:2,29502:3,29504:4}[e-6402]||1}(t)*l,c=function(e,t,r,n){var o;return t*(e*r+(o=n)-1&-o)}(r,n,u,Vt.unpackAlignment);return a.subarray(o>>s,o+c>>s)}function or(e){var t=mr.currentProgram;if(t){var r=t.uniformLocsById[e];return"number"==typeof r&&(t.uniformLocsById[e]=r=mr.getUniformLocation(t,t.uniformArrayNamesById[e]+(r>0?"["+r+"]":""))),r}Vt.recordError(1282)}var ir=[],ar=[];function sr(){sr.called||(sr.called=!0,function(){var e=(new Date).getFullYear(),t=new Date(e,0,1),r=new Date(e,6,1),n=t.getTimezoneOffset(),o=r.getTimezoneOffset(),i=Math.max(n,o);function a(e){var t=e.toTimeString().match(/\(([A-Za-z ]+)\)$/);return t?t[1]:"GMT"}M[kr()>>2]=60*i,M[Sr()>>2]=Number(n!=o);var s=a(t),l=a(r),u=H(s),c=H(l);o<n?(M[Pr()>>2]=u,M[Pr()+4>>2]=c):(M[Pr()>>2]=c,M[Pr()+4>>2]=u)}())}function lr(e){return e%4==0&&(e%100!=0||e%400==0)}function ur(e,t){for(var r=0,n=0;n<=t;r+=e[n++]);return r}var cr=[31,29,31,30,31,30,31,31,30,31,30,31],dr=[31,28,31,30,31,30,31,31,30,31,30,31];function fr(e,t){for(var r=new Date(e.getTime());t>0;){var n=lr(r.getFullYear()),o=r.getMonth(),i=(n?cr:dr)[o];if(!(t>i-r.getDate()))return r.setDate(r.getDate()+t),r;t-=i-r.getDate()+1,r.setDate(1),o<11?r.setMonth(o+1):(r.setMonth(0),r.setFullYear(r.getFullYear()+1))}return r}var mr,hr=function(e,t,r,n){e||(e=this),this.parent=e,this.mount=e.mount,this.mounted=null,this.id=Ce.nextInode++,this.name=t,this.mode=r,this.node_ops={},this.stream_ops={},this.rdev=n};Object.defineProperties(hr.prototype,{read:{get:function(){return!(365&~this.mode)},set:function(e){e?this.mode|=365:this.mode&=-366}},write:{get:function(){return!(146&~this.mode)},set:function(e){e?this.mode|=146:this.mode&=-147}},isFolder:{get:function(){return Ce.isDir(this.mode)}},isDevice:{get:function(){return Ce.isChrdev(this.mode)}}}),Ce.FSNode=hr,Ce.staticInit(),function(){for(var e=new Array(256),t=0;t<256;++t)e[t]=String.fromCharCode(t);Te=e}(),Oe=n.BindingError=Fe(Error,"BindingError"),Ne=n.InternalError=Fe(Error,"InternalError"),Xe.prototype.isAliasOf=function(e){if(!(this instanceof Xe))return!1;if(!(e instanceof Xe))return!1;for(var t=this.$$.ptrType.registeredClass,r=this.$$.ptr,n=e.$$.ptrType.registeredClass,o=e.$$.ptr;t.baseClass;)r=t.upcast(r),t=t.baseClass;for(;n.baseClass;)o=n.upcast(o),n=n.baseClass;return t===n&&r===o},Xe.prototype.clone=function(){if(this.$$.ptr||Ue(this),this.$$.preservePointerOnDelete)return this.$$.count.value+=1,this;var e,t=Ve(Object.create(Object.getPrototypeOf(this),{$$:{value:(e=this.$$,{count:e.count,deleteScheduled:e.deleteScheduled,preservePointerOnDelete:e.preservePointerOnDelete,ptr:e.ptr,ptrType:e.ptrType,smartPtr:e.smartPtr,smartPtrType:e.smartPtrType})}}));return t.$$.count.value+=1,t.$$.deleteScheduled=!1,t},Xe.prototype.delete=function(){this.$$.ptr||Ue(this),this.$$.deleteScheduled&&!this.$$.preservePointerOnDelete&&Be("Object already scheduled for deletion"),We(this),He(this.$$),this.$$.preservePointerOnDelete||(this.$$.smartPtr=void 0,this.$$.ptr=void 0)},Xe.prototype.isDeleted=function(){return!this.$$.ptr},Xe.prototype.deleteLater=function(){return this.$$.ptr||Ue(this),this.$$.deleteScheduled&&!this.$$.preservePointerOnDelete&&Be("Object already scheduled for deletion"),qe.push(this),1===qe.length&&Ye&&Ye(Ke),this.$$.deleteScheduled=!0,this},ut.prototype.getPointee=function(e){return this.rawGetPointee&&(e=this.rawGetPointee(e)),e},ut.prototype.destructor=function(e){this.rawDestructor&&this.rawDestructor(e)},ut.prototype.argPackAdvance=8,ut.prototype.readValueFromPointer=it,ut.prototype.deleteObject=function(e){null!==e&&e.delete()},ut.prototype.fromWireType=function(e){var t=this.getPointee(e);if(!t)return this.destructor(e),null;var r=function(e,t){return t=function(e,t){for(void 0===t&&Be("ptr should not be undefined");e.baseClass;)t=e.upcast(t),e=e.baseClass;return t}(e,t),st[t]}(this.registeredClass,t);if(void 0!==r){if(0===r.$$.count.value)return r.$$.ptr=t,r.$$.smartPtr=e,r.clone();var n=r.clone();return this.destructor(e),n}function o(){return this.isSmartPointer?lt(this.registeredClass.instancePrototype,{ptrType:this.pointeeType,ptr:t,smartPtrType:this,smartPtr:e}):lt(this.registeredClass.instancePrototype,{ptrType:this,ptr:e})}var i,a=this.registeredClass.getActualType(t),s=Ze[a];if(!s)return o.call(this);i=this.isConst?s.constPointerType:s.pointerType;var l=at(t,this.registeredClass,i.registeredClass);return null===l?o.call(this):this.isSmartPointer?lt(i.registeredClass.instancePrototype,{ptrType:i,ptr:l,smartPtrType:this,smartPtr:e}):lt(i.registeredClass.instancePrototype,{ptrType:i,ptr:l})},n.getInheritedInstanceCount=function(){return Object.keys(st).length},n.getLiveInheritedInstances=function(){var e=[];for(var t in st)st.hasOwnProperty(t)&&e.push(st[t]);return e},n.flushPendingDeletes=Ke,n.setDelayFunction=function(e){Ye=e,qe.length&&Ye&&Ye(Ke)},ft=n.UnboundTypeError=Fe(Error,"UnboundTypeError"),n.count_emval_handles=function(){for(var e=0,t=5;t<wt.length;++t)void 0!==wt[t]&&++e;return e},n.get_first_emval=function(){for(var e=5;e<wt.length;++e)if(void 0!==wt[e])return wt[e];return null},Nt.staticInit();for(var pr=0;pr<32;++pr)Qt.push(new Array(pr));var gr=new Float32Array(288);for(pr=0;pr<288;++pr)ir[pr]=gr.subarray(0,pr+1);var vr=new Int32Array(288);for(pr=0;pr<288;++pr)ar[pr]=vr.subarray(0,pr+1);function yr(e,t,r){var n=r>0?r:k(e)+1,o=new Array(n),i=P(e,o,0,o.length);return t&&(o.length=i),o}var _r,wr={a:function(e){return Er(e+16)+16},c:function(e,t,r){throw new _e(e).init(t,r),e},qb:function(e,t){try{return e=Pe.getStr(e),Pe.doAccess(e,t)}catch(e){return void 0!==Ce&&e instanceof Ce.ErrnoError||de(e),-e.errno}},T:function(e,t,r){Pe.varargs=r;try{var n=Pe.getStreamFromFD(e);switch(t){case 0:return(o=Pe.get())<0?-28:Ce.open(n.path,n.flags,0,o).fd;case 1:case 2:case 13:case 14:return 0;case 3:return n.flags;case 4:var o=Pe.get();return n.flags|=o,0;case 12:return o=Pe.get(),I[o+0>>1]=2,0;case 16:case 8:default:return-28;case 9:return Se(28),-1}}catch(e){return void 0!==Ce&&e instanceof Ce.ErrnoError||de(e),-e.errno}},sb:function(e,t,r){Pe.varargs=r;try{var n=Pe.getStreamFromFD(e);switch(t){case 21509:case 21505:case 21510:case 21511:case 21512:case 21506:case 21507:case 21508:case 21523:case 21524:return n.tty?0:-59;case 21519:if(!n.tty)return-59;var o=Pe.get();return M[o>>2]=0,0;case 21520:return n.tty?-28:-59;case 21531:return o=Pe.get(),Ce.ioctl(n,t,o);default:de("bad ioctl syscall "+t)}}catch(e){return void 0!==Ce&&e instanceof Ce.ErrnoError||de(e),-e.errno}},U:function(e,t,r){Pe.varargs=r;try{var n=Pe.getStr(e),o=r?Pe.get():0;return Ce.open(n,t,o).fd}catch(e){return void 0!==Ce&&e instanceof Ce.ErrnoError||de(e),-e.errno}},ib:function(e,t,r,n,o){},ub:function(e,t,r,n,o){var i=ke(r);ze(e,{name:t=De(t),fromWireType:function(e){return!!e},toWireType:function(e,t){return t?n:o},argPackAdvance:8,readValueFromPointer:function(e){var n;if(1===r)n=A;else if(2===r)n=I;else{if(4!==r)throw new TypeError("Unknown boolean type size: "+t);n=M}return this.fromWireType(n[e>>i])},destructorFunction:null})},i:function(e,t,r,n,o,i,a,s,l,u,c,d,f){c=De(c),i=dt(o,i),s&&(s=dt(a,s)),u&&(u=dt(l,u)),f=dt(d,f);var m=Re(c);Je(m,(function(){ht("Cannot construct "+c+" due to unbound types",[n])})),je([e,t,r],n?[n]:[],(function(t){var r,o;t=t[0],o=n?(r=t.registeredClass).instancePrototype:Xe.prototype;var a=Me(m,(function(){if(Object.getPrototypeOf(this)!==l)throw new Oe("Use 'new' to construct "+c);if(void 0===d.constructor_body)throw new Oe(c+" has no accessible constructor");var e=d.constructor_body[arguments.length];if(void 0===e)throw new Oe("Tried to invoke ctor of "+c+" with invalid number of parameters ("+arguments.length+") - expected ("+Object.keys(d.constructor_body).toString()+") parameters instead!");return e.apply(this,arguments)})),l=Object.create(o,{constructor:{value:a}});a.prototype=l;var d=new et(c,a,l,f,r,i,s,u),h=new ut(c,d,!0,!1,!1),p=new ut(c+"*",d,!1,!1,!1),g=new ut(c+" const*",d,!1,!0,!1);return Ze[e]={pointerType:p,constPointerType:g},ct(m,a),[h,p,g]}))},s:function(e,t,r,n,o,i,a){var s=vt(r,n);t=De(t),i=dt(o,i),je([],[e],(function(e){var n=(e=e[0]).name+"."+t;function o(){ht("Cannot call "+n+" due to unbound types",s)}t.startsWith("@@")&&(t=Symbol[t.substring(2)]);var l=e.registeredClass.constructor;return void 0===l[t]?(o.argCount=r-1,l[t]=o):(Qe(l,t,n),l[t].overloadTable[r-1]=o),je([],s,(function(e){var o=[e[0],null].concat(e.slice(1)),s=gt(n,o,null,i,a);return void 0===l[t].overloadTable?(s.argCount=r-1,l[t]=s):l[t].overloadTable[r-1]=s,[]})),[]}))},k:function(e,t,r,n,o,i){_(t>0);var a=vt(t,r);o=dt(n,o),je([],[e],(function(e){var r="constructor "+(e=e[0]).name;if(void 0===e.registeredClass.constructor_body&&(e.registeredClass.constructor_body=[]),void 0!==e.registeredClass.constructor_body[t-1])throw new Oe("Cannot register multiple constructors with identical number of parameters ("+(t-1)+") for class '"+e.name+"'! Overload resolution is currently only performed using the parameter count, not actual type info!");return e.registeredClass.constructor_body[t-1]=function(){ht("Cannot construct "+e.name+" due to unbound types",a)},je([],a,(function(n){return n.splice(1,0,null),e.registeredClass.constructor_body[t-1]=gt(r,n,null,o,i),[]})),[]}))},e:function(e,t,r,n,o,i,a,s){var l=vt(r,n);t=De(t),i=dt(o,i),je([],[e],(function(e){var n=(e=e[0]).name+"."+t;function o(){ht("Cannot call "+n+" due to unbound types",l)}t.startsWith("@@")&&(t=Symbol[t.substring(2)]),s&&e.registeredClass.pureVirtualFunctions.push(t);var u=e.registeredClass.instancePrototype,c=u[t];return void 0===c||void 0===c.overloadTable&&c.className!==e.name&&c.argCount===r-2?(o.argCount=r-2,o.className=e.name,u[t]=o):(Qe(u,t,n),u[t].overloadTable[r-2]=o),je([],l,(function(o){var s=gt(n,o,e,i,a);return void 0===u[t].overloadTable?(s.argCount=r-2,u[t]=s):u[t].overloadTable[r-2]=s,[]})),[]}))},g:function(e,t,r,n,o,i,a,s,l,u){t=De(t),o=dt(n,o),je([],[e],(function(e){var n=(e=e[0]).name+"."+t,c={get:function(){ht("Cannot access "+n+" due to unbound types",[r,a])},enumerable:!0,configurable:!0};return c.set=l?function(){ht("Cannot access "+n+" due to unbound types",[r,a])}:function(e){Be(n+" is a read-only property")},Object.defineProperty(e.registeredClass.instancePrototype,t,c),je([],l?[r,a]:[r],(function(r){var a=r[0],c={get:function(){var t=yt(this,e,n+" getter");return a.fromWireType(o(i,t))},enumerable:!0};if(l){l=dt(s,l);var d=r[1];c.set=function(t){var r=yt(this,e,n+" setter"),o=[];l(u,r,d.toWireType(o,t)),pt(o)}}return Object.defineProperty(e.registeredClass.instancePrototype,t,c),[]})),[]}))},tb:function(e,t){ze(e,{name:t=De(t),fromWireType:function(e){var t=xt.toValue(e);return Et(e),t},toWireType:function(e,t){return xt.toHandle(t)},argPackAdvance:8,readValueFromPointer:it,destructorFunction:null})},Jb:function(e,t,r,n){var o=ke(r);function i(){}t=De(t),i.values={},ze(e,{name:t,constructor:i,fromWireType:function(e){return this.constructor.values[e]},toWireType:function(e,t){return t.value},argPackAdvance:8,readValueFromPointer:Ct(t,o,n),destructorFunction:null}),Je(t,i)},m:function(e,t,r){var n=Pt(e,"enum");t=De(t);var o=n.constructor,i=Object.create(n.constructor.prototype,{value:{value:r},constructor:{value:Me(n.name+"_"+t,(function(){}))}});o.values[r]=i,o[t]=i},W:function(e,t,r){var n=ke(r);ze(e,{name:t=De(t),fromWireType:function(e){return e},toWireType:function(e,t){if("number"!=typeof t&&"boolean"!=typeof t)throw new TypeError('Cannot convert "'+St(t)+'" to '+this.name);return t},argPackAdvance:8,readValueFromPointer:kt(t,n),destructorFunction:null})},rb:function(e,t,r,n,o,i){var a=vt(t,r);e=De(e),o=dt(n,o),Je(e,(function(){ht("Cannot call "+e+" due to unbound types",a)}),t-1),je([],a,(function(r){var n=[r[0],null].concat(r.slice(1));return ct(e,gt(e,n,null,o,i),t-1),[]}))},n:function(e,t,r,n,o){t=De(t),-1===o&&(o=4294967295);var i=ke(r),a=function(e){return e};if(0===n){var s=32-8*r;a=function(e){return e<<s>>>s}}var l=t.includes("unsigned");ze(e,{name:t,fromWireType:a,toWireType:function(e,r){if("number"!=typeof r&&"boolean"!=typeof r)throw new TypeError('Cannot convert "'+St(r)+'" to '+this.name);if(r<n||r>o)throw new TypeError('Passing a number "'+St(r)+'" from JS side to C/C++ side to an argument of type "'+t+'", which is outside the valid range ['+n+", "+o+"]!");return l?r>>>0:0|r},argPackAdvance:8,readValueFromPointer:Tt(t,i,0!==n),destructorFunction:null})},l:function(e,t,r){var n=[Int8Array,Uint8Array,Int16Array,Uint16Array,Int32Array,Uint32Array,Float32Array,Float64Array][t];function o(e){var t=F,r=t[e>>=2],o=t[e+1];return new n(D,o,r)}ze(e,{name:r=De(r),fromWireType:o,argPackAdvance:8,readValueFromPointer:o},{ignoreDuplicateRegistrations:!0})},j:function(e,t,r,n,o,i,a,s,l,u,c,d){r=De(r),i=dt(o,i),s=dt(a,s),u=dt(l,u),d=dt(c,d),je([e],[t],(function(e){return e=e[0],[new ut(r,e.registeredClass,!1,!1,!0,e,n,i,s,u,d)]}))},X:function(e,t){var r="std::string"===(t=De(t));ze(e,{name:t,fromWireType:function(e){var t,n=F[e>>2];if(r)for(var o=e+4,i=0;i<=n;++i){var a=e+4+i;if(i==n||0==L[a]){var s=C(o,a-o);void 0===t?t=s:(t+=String.fromCharCode(0),t+=s),o=a+1}}else{var l=new Array(n);for(i=0;i<n;++i)l[i]=String.fromCharCode(L[e+4+i]);t=l.join("")}return br(e),t},toWireType:function(e,t){t instanceof ArrayBuffer&&(t=new Uint8Array(t));var n="string"==typeof t;n||t instanceof Uint8Array||t instanceof Uint8ClampedArray||t instanceof Int8Array||Be("Cannot pass non-string to std::string");var o=(r&&n?function(){return k(t)}:function(){return t.length})(),i=Er(4+o+1);if(F[i>>2]=o,r&&n)S(t,i+4,o+1);else if(n)for(var a=0;a<o;++a){var s=t.charCodeAt(a);s>255&&(br(i),Be("String has UTF-16 code units that do not fit in 8 bits")),L[i+4+a]=s}else for(a=0;a<o;++a)L[i+4+a]=t[a];return null!==e&&e.push(br,i),i},argPackAdvance:8,readValueFromPointer:it,destructorFunction:function(e){br(e)}})},B:function(e,t,r){var n,o,i,a,s;r=De(r),2===t?(n=$,o=j,a=z,i=function(){return R},s=1):4===t&&(n=U,o=G,a=W,i=function(){return F},s=2),ze(e,{name:r,fromWireType:function(e){for(var r,o=F[e>>2],a=i(),l=e+4,u=0;u<=o;++u){var c=e+4+u*t;if(u==o||0==a[c>>s]){var d=n(l,c-l);void 0===r?r=d:(r+=String.fromCharCode(0),r+=d),l=c+t}}return br(e),r},toWireType:function(e,n){"string"!=typeof n&&Be("Cannot pass non-string to C++ string type "+r);var i=a(n),l=Er(4+i+t);return F[l>>2]=i>>s,o(n,l+4,i+t),null!==e&&e.push(br,l),l},argPackAdvance:8,readValueFromPointer:it,destructorFunction:function(e){br(e)}})},vb:function(e,t){ze(e,{isVoid:!0,name:t=De(t),argPackAdvance:0,fromWireType:function(){},toWireType:function(e,t){}})},wb:function(e){delete Nt.xhrs[e-1]},o:function(e,t,r,n){e=xt.toValue(e);for(var o=function(e,t){for(var r=new Array(e),n=0;n<e;++n)r[n]=Pt(M[(t>>2)+n],"parameter "+n);return r}(t,r),i=new Array(t),a=0;a<t;++a){var s=o[a];i[a]=s.readValueFromPointer(n),n+=s.argPackAdvance}var l=e.apply(void 0,i);return xt.toHandle(l)},b:Et,f:function(e){e>4&&(wt[e].refcount+=1)},h:function(e,t){var r=(e=Pt(e,"_emval_take_value")).readValueFromPointer(t);return xt.toHandle(r)},d:function(){de("")},lb:function(e,t){var r;if(0===e)r=Date.now();else{if(1!==e&&4!==e)return Se(28),-1;r=bt()}return M[t>>2]=r/1e3|0,M[t+4>>2]=r%1e3*1e3*1e3|0,0},r:function(e,t,r){var n=function(e,t){var r;for(Dt.length=0,t>>=2;r=L[e++];){var n=r<105;n&&1&t&&t++,Dt.push(n?B[t++>>1]:M[t]),++t}return Dt}(t,r);return he[e].apply(null,n)},O:function(e,t,r){var n=Rt(e);if(!n)return-4;M[t>>2]=n.width,M[r>>2]=n.height},gb:function(){return devicePixelRatio},u:function(e,t,r){if(!(e=It(e)))return-4;var n=Mt(e);return B[t>>3]=n.width,B[r>>3]=n.height,0},F:bt,yb:function(){return!0},jb:function(e,t,r){L.copyWithin(e,t,t+r)},kb:function(e){L.length,de("OOM")},Q:function(e,t,r){var n=Rt(e);return n?(n.width=t,n.height=r,0):-4},P:function(e,t,r,n,o){return Ft(e,t,r,n,2,"keydown"),0},M:function(e,t,r,n,o){return Ft(e,t,r,n,3,"keyup"),0},cb:function(e,t,r,n,o){return Bt(e,t,r,n,5,"mousedown"),0},ab:function(e,t,r,n,o){return Bt(e,t,r,n,8,"mousemove"),0},bb:function(e,t,r,n,o){return Bt(e,t,r,n,6,"mouseup"),0},R:function(e,t,r,n,o){return function(e,t,r,n){At.uiEvent||(At.uiEvent=Er(36));var o={target:e=It(e),eventTypeString:"resize",callbackfunc:n,handlerFunc:function(r){var o=r||event;if(o.target==e){var i=document.body;if(i){var a=At.uiEvent;M[a>>2]=o.detail,M[a+4>>2]=i.clientWidth,M[a+8>>2]=i.clientHeight,M[a+12>>2]=innerWidth,M[a+16>>2]=innerHeight,M[a+20>>2]=outerWidth,M[a+24>>2]=outerHeight,M[a+28>>2]=pageXOffset,M[a+32>>2]=pageYOffset,ve(n)(10,a,t)&&o.preventDefault()}}},useCapture:r};At.registerOrRemoveHandler(o)}(e,t,r,n),0},$a:function(e,t,r,n,o){return void 0!==(e=It(e)).onwheel?(function(e,t,r,n){At.wheelEvent||(At.wheelEvent=Er(104));var o={target:e,allowsDeferredCalls:!0,eventTypeString:"wheel",callbackfunc:n,handlerFunc:function(r){var o=r||event,i=At.wheelEvent;Ot(i,o,e),B[i+72>>3]=o.deltaX,B[i+80>>3]=o.deltaY,B[i+88>>3]=o.deltaZ,M[i+96>>2]=o.deltaMode,ve(n)(9,i,t)&&o.preventDefault()},useCapture:r};At.registerOrRemoveHandler(o)}(e,t,r,n),0):-1},xb:function(e,t,r,n,o){var i=e+112,a=C(i),s=F[i+36>>2],l=F[i+40>>2],u=F[i+44>>2],c=F[i+48>>2],d=F[i+52>>2],f=!!(4&d),m=!!(32&d),h=!!(16&d),p=!!(64&d),g=function(e,r,n){jt((function(){s?ve(s)(e):t&&t(e)}),p)},v=function(e,t,r){jt((function(){u?ve(u)(e):n&&n(e)}),p)},y=function(e,t,n){jt((function(){l?ve(l)(e):r&&r(e)}),p)},_=function(e,t,r){jt((function(){c?ve(c)(e):o&&o(e)}),p)},w=function(e,r,n){zt(Nt.dbInstance,e,r.response,(function(e,r,n){jt((function(){s?ve(s)(e):t&&t(e)}),p)}),(function(e,r,n){jt((function(){s?ve(s)(e):t&&t(e)}),p)}))};if("EM_IDB_STORE"===a){var E=F[i+84>>2];zt(Nt.dbInstance,e,L.slice(E,E+F[i+88>>2]),g,y)}else if("EM_IDB_DELETE"===a)!function(e,t,r,n){if(e){var o=F[t+112+64>>2];o||(o=F[t+8>>2]);var i=C(o);try{var a=e.transaction(["FILES"],"readwrite").objectStore("FILES").delete(i);a.onsuccess=function(e){var n=e.target.result;F[t+12>>2]=0,Nt.setu64(t+16,0),Nt.setu64(t+24,0),Nt.setu64(t+32,0),R[t+40>>1]=4,R[t+42>>1]=200,S("OK",t+44,64),r(t,0,n)},a.onerror=function(e){R[t+40>>1]=4,R[t+42>>1]=404,S("Not Found",t+44,64),n(t,0,e)}}catch(e){n(t,0,e)}}else n(t,0,"IndexedDB not available!")}(Nt.dbInstance,e,g,y);else if(h){if(m)return 0;$t(e,f?w:g,y,v,_)}else!function(e,t,r,n){if(e){var o=F[t+112+64>>2];o||(o=F[t+8>>2]);var i=C(o);try{var a=e.transaction(["FILES"],"readonly").objectStore("FILES").get(i);a.onsuccess=function(e){if(e.target.result){var o=e.target.result,i=o.byteLength||o.length,a=Er(i);L.set(new Uint8Array(o),a),F[t+12>>2]=a,Nt.setu64(t+16,i),Nt.setu64(t+24,0),Nt.setu64(t+32,i),R[t+40>>1]=4,R[t+42>>1]=200,S("OK",t+44,64),r(t,0,o)}else R[t+40>>1]=4,R[t+42>>1]=404,S("Not Found",t+44,64),n(t,0,"no data")},a.onerror=function(e){R[t+40>>1]=4,R[t+42>>1]=404,S("Not Found",t+44,64),n(t,0,e)}}catch(e){n(t,0,e)}}else n(t,0,"IndexedDB not available!")}(Nt.dbInstance,e,g,m?y:f?function(e,t,r){$t(e,w,y,v,_)}:function(e,t,r){$t(e,g,y,v,_)});return e},_a:function(){return Vt.currentContext&&Vt.currentContext.GLctx&&Vt.currentContext.attributes.explicitSwapControl?0:-3},db:function(e,t){return r=e,o=M[6+(n=t>>2)],i={alpha:!!M[n+0],depth:!!M[n+1],stencil:!!M[n+2],antialias:!!M[n+3],premultipliedAlpha:!!M[n+4],preserveDrawingBuffer:!!M[n+5],powerPreference:Yt[o],failIfMajorPerformanceCaveat:!!M[n+7],majorVersion:M[n+8],minorVersion:M[n+9],enableExtensionsByDefault:M[n+10],explicitSwapControl:M[n+11],proxyContextToMainThread:M[n+12],renderViaOffscreenBackBuffer:M[n+13]},(a=Rt(r))?i.explicitSwapControl?0:Vt.createContext(a,i):0;var r,n,o,i,a},fb:function(e){Vt.currentContext==e&&(Vt.currentContext=0),Vt.deleteContext(e)},ta:function(e,t){var r=Vt.getContext(e),n=C(t);return n.startsWith("GL_")&&(n=n.substr(3)),"ANGLE_instanced_arrays"==n&&Ut(mr),"OES_vertex_array_object"==n&&Gt(mr),"WEBGL_draw_buffers"==n&&Wt(mr),"WEBGL_multi_draw"==n&&Ht(mr),!!r.GLctx.getExtension(n)},ua:qt,eb:function(e){for(var t=e>>2,r=0;r<14;++r)M[t+r]=0;M[t+0]=M[t+1]=M[t+3]=M[t+4]=M[t+8]=M[t+10]=1},t:Kt,nb:function(e,t){var r=0;return Zt().forEach((function(n,o){var i=t+r;M[e+4*o>>2]=i,function(e,t){for(var r=0;r<e.length;++r)A[0|t++]=e.charCodeAt(r);A[0|t]=0}(n,i),r+=n.length+1})),0},ob:function(e,t){var r=Zt();M[e>>2]=r.length;var n=0;return r.forEach((function(e){n+=e.length+1})),M[t>>2]=n,0},z:function(e){Rr(e)},A:function(e){try{var t=Pe.getStreamFromFD(e);return Ce.close(t),0}catch(e){return void 0!==Ce&&e instanceof Ce.ErrnoError||de(e),e.errno}},pb:function(e,t){try{var r=Pe.getStreamFromFD(e),n=r.tty?2:Ce.isDir(r.mode)?3:Ce.isLink(r.mode)?7:4;return A[0|t]=n,0}catch(e){return void 0!==Ce&&e instanceof Ce.ErrnoError||de(e),e.errno}},S:function(e,t,r,n){try{var o=Pe.getStreamFromFD(e),i=Pe.doReadv(o,t,r);return M[n>>2]=i,0}catch(e){return void 0!==Ce&&e instanceof Ce.ErrnoError||de(e),e.errno}},hb:function(e,t,r,n,o){try{var i=Pe.getStreamFromFD(e),a=4294967296*r+(t>>>0),s=9007199254740992;return a<=-s||a>=s?-61:(Ce.llseek(i,a,n),ie=[i.position>>>0,(oe=i.position,+Math.abs(oe)>=1?oe>0?(0|Math.min(+Math.floor(oe/4294967296),4294967295))>>>0:~~+Math.ceil((oe-+(~~oe>>>0))/4294967296)>>>0:0)],M[o>>2]=ie[0],M[o+4>>2]=ie[1],i.getdents&&0===a&&0===n&&(i.getdents=null),0)}catch(e){return void 0!==Ce&&e instanceof Ce.ErrnoError||de(e),e.errno}},V:function(e,t,r,n){try{var o=Pe.getStreamFromFD(e),i=Pe.doWritev(o,t,r);return M[n>>2]=i,0}catch(e){return void 0!==Ce&&e instanceof Ce.ErrnoError||de(e),e.errno}},E:function(e){mr.activeTexture(e)},ia:function(e,t){mr.attachShader(Vt.programs[e],Vt.shaders[t])},ha:function(e,t,r){mr.bindAttribLocation(Vt.programs[e],t,C(r))},N:function(e,t){mr.bindBuffer(e,Vt.buffers[t])},ra:function(e,t){mr.bindFramebuffer(e,Vt.framebuffers[t])},Oa:function(e,t){mr.bindRenderbuffer(e,Vt.renderbuffers[t])},_:function(e,t){mr.bindTexture(e,Vt.textures[t])},w:function(e){mr.bindVertexArray(Vt.vaos[e])},Ja:function(e,t){mr.blendFunc(e,t)},Wa:function(e,t,r,n){mr.bufferData(e,r?L.subarray(r,r+t):t,n)},Va:function(e,t,r,n){mr.bufferSubData(e,t,L.subarray(n,n+r))},pa:function(e){return mr.checkFramebufferStatus(e)},qa:function(e){mr.clear(e)},K:function(e,t,r,n){mr.clearColor(e,t,r,n)},Ia:function(e){mr.clearDepth(e)},La:function(e,t,r,n){mr.colorMask(!!e,!!t,!!r,!!n)},Ea:function(e){mr.compileShader(Vt.shaders[e])},Z:function(e,t,r,n,o,i,a,s,l){mr.compressedTexSubImage2D(e,t,r,n,o,i,a,l?L.subarray(l,l+s):null)},ma:function(e,t,r,n,o,i,a,s){mr.copyTexSubImage2D(e,t,r,n,o,i,a,s)},la:function(){var e=Vt.getNewId(Vt.programs),t=mr.createProgram();return t.name=e,t.maxUniformLength=t.maxAttributeLength=t.maxUniformBlockNameLength=0,t.uniformIdCounter=1,Vt.programs[e]=t,e},Ha:function(e){var t=Vt.getNewId(Vt.shaders);return Vt.shaders[t]=mr.createShader(e),t},Ya:function(e,t){for(var r=0;r<e;r++){var n=M[t+4*r>>2],o=Vt.buffers[n];o&&(mr.deleteBuffer(o),o.name=0,Vt.buffers[n]=null)}},Sa:function(e,t){for(var r=0;r<e;++r){var n=M[t+4*r>>2],o=Vt.framebuffers[n];o&&(mr.deleteFramebuffer(o),o.name=0,Vt.framebuffers[n]=null)}},ka:function(e){if(e){var t=Vt.programs[e];t?(mr.deleteProgram(t),t.name=0,Vt.programs[e]=null):Vt.recordError(1281)}},Ga:function(e){if(e){var t=Vt.shaders[e];t?(mr.deleteShader(t),Vt.shaders[e]=null):Vt.recordError(1281)}},Pb:function(e,t){for(var r=0;r<e;r++){var n=M[t+4*r>>2],o=Vt.textures[n];o&&(mr.deleteTexture(o),o.name=0,Vt.textures[n]=null)}},Fb:function(e,t){for(var r=0;r<e;r++){var n=M[t+4*r>>2];mr.deleteVertexArray(Vt.vaos[n]),Vt.vaos[n]=null}},I:function(e){mr.depthFunc(e)},Ka:function(e){mr.depthMask(!!e)},x:function(e){mr.disable(e)},Bb:function(e){mr.disableVertexAttribArray(e)},Ib:function(e,t,r){mr.drawArrays(e,t,r)},xa:function(e,t,r,n){mr.drawArraysInstanced(e,t,r,n)},oa:function(e,t){for(var r=Qt[e],n=0;n<e;n++)r[n]=M[t+4*n>>2];mr.drawBuffers(r)},Hb:function(e,t,r,n){mr.drawElements(e,t,r,n)},ya:function(e,t,r,n,o){mr.drawElementsInstanced(e,t,r,n,o)},L:function(e){mr.enable(e)},Eb:function(e){mr.enableVertexAttribArray(e)},Ra:function(e,t,r,n){mr.framebufferRenderbuffer(e,t,r,Vt.renderbuffers[n])},Qa:function(e,t,r,n,o){mr.framebufferTexture2D(e,t,r,Vt.textures[n],o)},Za:function(e,t){Jt(e,t,"createBuffer",Vt.buffers)},Ta:function(e,t){Jt(e,t,"createFramebuffer",Vt.framebuffers)},va:function(e,t){for(var r=0;r<e;r++){var n=mr.disjointTimerQueryExt.createQueryEXT();if(!n){for(Vt.recordError(1282);r<e;)M[t+4*r++>>2]=0;return}var o=Vt.getNewId(Vt.queries);n.name=o,Vt.queries[o]=n,M[t+4*r>>2]=o}},Pa:function(e,t){Jt(e,t,"createRenderbuffer",Vt.renderbuffers)},Qb:function(e,t){Jt(e,t,"createTexture",Vt.textures)},Gb:function(e,t){Jt(e,t,"createVertexArray",Vt.vaos)},Ob:function(e){mr.generateMipmap(e)},Xa:function(e,t,r){r?M[r>>2]=mr.getBufferParameter(e,t):Vt.recordError(1281)},Ua:function(){var e=mr.getError()||Vt.lastError;return Vt.lastError=0,e},Ma:function(e,t){er(e,t,2)},y:function(e,t){er(e,t,0)},ja:function(e,t,r,n){var o=mr.getProgramInfoLog(Vt.programs[e]);null===o&&(o="(unknown error)");var i=t>0&&n?S(o,n,t):0;r&&(M[r>>2]=i)},G:function(e,t,r){if(r)if(e>=Vt.counter)Vt.recordError(1281);else if(e=Vt.programs[e],35716==t){var n=mr.getProgramInfoLog(e);null===n&&(n="(unknown error)"),M[r>>2]=n.length+1}else if(35719==t){if(!e.maxUniformLength)for(var o=0;o<mr.getProgramParameter(e,35718);++o)e.maxUniformLength=Math.max(e.maxUniformLength,mr.getActiveUniform(e,o).name.length+1);M[r>>2]=e.maxUniformLength}else if(35722==t){if(!e.maxAttributeLength)for(o=0;o<mr.getProgramParameter(e,35721);++o)e.maxAttributeLength=Math.max(e.maxAttributeLength,mr.getActiveAttrib(e,o).name.length+1);M[r>>2]=e.maxAttributeLength}else if(35381==t){if(!e.maxUniformBlockNameLength)for(o=0;o<mr.getProgramParameter(e,35382);++o)e.maxUniformBlockNameLength=Math.max(e.maxUniformBlockNameLength,mr.getActiveUniformBlockName(e,o).length+1);M[r>>2]=e.maxUniformBlockNameLength}else M[r>>2]=mr.getProgramParameter(e,t);else Vt.recordError(1281)},Da:function(e,t,r,n){var o=mr.getShaderInfoLog(Vt.shaders[e]);null===o&&(o="(unknown error)");var i=t>0&&n?S(o,n,t):0;r&&(M[r>>2]=i)},H:function(e,t,r){if(r)if(35716==t){var n=mr.getShaderInfoLog(Vt.shaders[e]);null===n&&(n="(unknown error)");var o=n?n.length+1:0;M[r>>2]=o}else if(35720==t){var i=mr.getShaderSource(Vt.shaders[e]),a=i?i.length+1:0;M[r>>2]=a}else M[r>>2]=mr.getShaderParameter(Vt.shaders[e],t);else Vt.recordError(1281)},q:function(e){var t=Vt.stringCache[e];if(!t){switch(e){case 7939:var r=mr.getSupportedExtensions()||[];t=tr((r=r.concat(r.map((function(e){return"GL_"+e})))).join(" "));break;case 7936:case 7937:case 37445:case 37446:var n=mr.getParameter(e);n||Vt.recordError(1280),t=n&&tr(n);break;case 7938:var o=mr.getParameter(7938);t=tr(o="OpenGL ES 2.0 ("+o+")");break;case 35724:var i=mr.getParameter(35724),a=i.match(/^WebGL GLSL ES ([0-9]\.[0-9][0-9]?)(?:$| .*)/);null!==a&&(3==a[1].length&&(a[1]=a[1]+"0"),i="OpenGL ES GLSL ES "+a[1]+" ("+i+")"),t=tr(i);break;default:Vt.recordError(1280)}Vt.stringCache[e]=t}return t},fa:function(e,t){if(t=C(t),e=Vt.programs[e]){!function(e){var t,r,n=e.uniformLocsById,o=e.uniformSizeAndIdsByName;if(!n)for(e.uniformLocsById=n={},e.uniformArrayNamesById={},t=0;t<mr.getProgramParameter(e,35718);++t){var i=mr.getActiveUniform(e,t),a=i.name,s=i.size,l=rr(a),u=l>0?a.slice(0,l):a,c=e.uniformIdCounter;for(e.uniformIdCounter+=s,o[u]=[s,c],r=0;r<s;++r)n[c]=r,e.uniformArrayNamesById[c++]=u}}(e);var r=e.uniformLocsById,n=0,o=t,i=rr(t);i>0&&(s=t.slice(i+1),n=parseInt(s)>>>0,o=t.slice(0,i));var a=e.uniformSizeAndIdsByName[o];if(a&&n<a[0]&&(r[n+=a[1]]=r[n]||mr.getUniformLocation(e,t)))return n}else Vt.recordError(1281);var s;return-1},J:function(e){mr.lineWidth(e)},ga:function(e){e=Vt.programs[e],mr.linkProgram(e),e.uniformLocsById=0,e.uniformSizeAndIdsByName={}},Ba:function(e,t,r,n){mr.multiDrawWebgl.multiDrawArraysWEBGL(e,M,t>>2,M,r>>2,n)},za:function(e,t,r,n,o){mr.multiDrawWebgl.multiDrawArraysInstancedWEBGL(e,M,t>>2,M,r>>2,M,n>>2,o)},Ca:function(e,t,r,n,o){mr.multiDrawWebgl.multiDrawElementsWEBGL(e,M,t>>2,r,M,n>>2,o)},Aa:function(e,t,r,n,o,i){mr.multiDrawWebgl.multiDrawElementsInstancedWEBGL(e,M,t>>2,r,M,n>>2,M,o>>2,i)},wa:function(e,t){3317==e&&(Vt.unpackAlignment=t),mr.pixelStorei(e,t)},na:function(e,t,r,n,o,i,a){var s=nr(i,o,r,n,a);s?mr.readPixels(e,t,r,n,o,i,s):Vt.recordError(1280)},Na:function(e,t,r,n){mr.renderbufferStorage(e,t,r,n)},Fa:function(e,t,r,n){var o=Vt.getSource(e,t,r,n);mr.shaderSource(Vt.shaders[e],o)},Kb:function(e,t,r,n,o,i,a,s,l){mr.texImage2D(e,t,r,n,o,i,a,s,l?nr(s,a,n,o,l):null)},Mb:function(e,t,r){mr.texParameterf(e,t,r)},Lb:function(e,t,r){var n=O[r>>2];mr.texParameterf(e,t,n)},Nb:function(e,t,r){mr.texParameteri(e,t,r)},D:function(e,t,r,n,o,i,a,s,l){var u=null;l&&(u=nr(s,a,o,i,l)),mr.texSubImage2D(e,t,r,n,o,i,a,s,u)},ea:function(e,t,r){if(t<=288)for(var n=ir[t-1],o=0;o<t;++o)n[o]=O[r+4*o>>2];else n=O.subarray(r>>2,r+4*t>>2);mr.uniform1fv(or(e),n)},aa:function(e,t,r){if(t<=288)for(var n=ar[t-1],o=0;o<t;++o)n[o]=M[r+4*o>>2];else n=M.subarray(r>>2,r+4*t>>2);mr.uniform1iv(or(e),n)},da:function(e,t,r){if(t<=144)for(var n=ir[2*t-1],o=0;o<2*t;o+=2)n[o]=O[r+4*o>>2],n[o+1]=O[r+(4*o+4)>>2];else n=O.subarray(r>>2,r+8*t>>2);mr.uniform2fv(or(e),n)},ca:function(e,t,r){if(t<=96)for(var n=ir[3*t-1],o=0;o<3*t;o+=3)n[o]=O[r+4*o>>2],n[o+1]=O[r+(4*o+4)>>2],n[o+2]=O[r+(4*o+8)>>2];else n=O.subarray(r>>2,r+12*t>>2);mr.uniform3fv(or(e),n)},ba:function(e,t,r){if(t<=72){var n=ir[4*t-1],o=O;r>>=2;for(var i=0;i<4*t;i+=4){var a=r+i;n[i]=o[a],n[i+1]=o[a+1],n[i+2]=o[a+2],n[i+3]=o[a+3]}}else n=O.subarray(r>>2,r+16*t>>2);mr.uniform4fv(or(e),n)},$:function(e,t,r,n){if(t<=32)for(var o=ir[9*t-1],i=0;i<9*t;i+=9)o[i]=O[n+4*i>>2],o[i+1]=O[n+(4*i+4)>>2],o[i+2]=O[n+(4*i+8)>>2],o[i+3]=O[n+(4*i+12)>>2],o[i+4]=O[n+(4*i+16)>>2],o[i+5]=O[n+(4*i+20)>>2],o[i+6]=O[n+(4*i+24)>>2],o[i+7]=O[n+(4*i+28)>>2],o[i+8]=O[n+(4*i+32)>>2];else o=O.subarray(n>>2,n+36*t>>2);mr.uniformMatrix3fv(or(e),!!r,o)},p:function(e){e=Vt.programs[e],mr.useProgram(e),mr.currentProgram=e},Cb:function(e,t){mr.vertexAttribDivisor(e,t)},Db:function(e,t,r,n,o,i){mr.vertexAttribPointer(e,t,r,!!n,o,i)},sa:function(e,t,r,n){mr.viewport(e,t,r,n)},Ab:function e(t,r){var n=new Date(1e3*M[t>>2]);M[r>>2]=n.getUTCSeconds(),M[r+4>>2]=n.getUTCMinutes(),M[r+8>>2]=n.getUTCHours(),M[r+12>>2]=n.getUTCDate(),M[r+16>>2]=n.getUTCMonth(),M[r+20>>2]=n.getUTCFullYear()-1900,M[r+24>>2]=n.getUTCDay(),M[r+36>>2]=0,M[r+32>>2]=0;var o=Date.UTC(n.getUTCFullYear(),0,1,0,0,0,0),i=(n.getTime()-o)/864e5|0;return M[r+28>>2]=i,e.GMTString||(e.GMTString=H("GMT")),M[r+40>>2]=e.GMTString,r},C:function(e,t){sr();var r=new Date(1e3*M[e>>2]);M[t>>2]=r.getSeconds(),M[t+4>>2]=r.getMinutes(),M[t+8>>2]=r.getHours(),M[t+12>>2]=r.getDate(),M[t+16>>2]=r.getMonth(),M[t+20>>2]=r.getFullYear()-1900,M[t+24>>2]=r.getDay();var n=new Date(r.getFullYear(),0,1),o=(r.getTime()-n.getTime())/864e5|0;M[t+28>>2]=o,M[t+36>>2]=-60*r.getTimezoneOffset();var i=new Date(r.getFullYear(),6,1).getTimezoneOffset(),a=n.getTimezoneOffset(),s=0|(i!=a&&r.getTimezoneOffset()==Math.min(a,i));M[t+32>>2]=s;var l=M[Pr()+(s?4:0)>>2];return M[t+40>>2]=l,t},zb:function(e){sr();var t=new Date(M[e+20>>2]+1900,M[e+16>>2],M[e+12>>2],M[e+8>>2],M[e+4>>2],M[e>>2],0),r=M[e+32>>2],n=t.getTimezoneOffset(),o=new Date(t.getFullYear(),0,1),i=new Date(t.getFullYear(),6,1).getTimezoneOffset(),a=o.getTimezoneOffset(),s=Math.min(a,i);if(r<0)M[e+32>>2]=Number(i!=a&&s==n);else if(r>0!=(s==n)){var l=Math.max(a,i),u=r>0?s:l;t.setTime(t.getTime()+6e4*(u-n))}M[e+24>>2]=t.getDay();var c=(t.getTime()-o.getTime())/864e5|0;return M[e+28>>2]=c,M[e>>2]=t.getSeconds(),M[e+4>>2]=t.getMinutes(),M[e+8>>2]=t.getHours(),M[e+12>>2]=t.getDate(),M[e+16>>2]=t.getMonth(),t.getTime()/1e3|0},v:function(e){},mb:function(e,t,r,n){return function(e,t,r,n){var o=M[n+40>>2],i={tm_sec:M[n>>2],tm_min:M[n+4>>2],tm_hour:M[n+8>>2],tm_mday:M[n+12>>2],tm_mon:M[n+16>>2],tm_year:M[n+20>>2],tm_wday:M[n+24>>2],tm_yday:M[n+28>>2],tm_isdst:M[n+32>>2],tm_gmtoff:M[n+36>>2],tm_zone:o?C(o):""},a=C(r),s={"%c":"%a %b %d %H:%M:%S %Y","%D":"%m/%d/%y","%F":"%Y-%m-%d","%h":"%b","%r":"%I:%M:%S %p","%R":"%H:%M","%T":"%H:%M:%S","%x":"%m/%d/%y","%X":"%H:%M:%S","%Ec":"%c","%EC":"%C","%Ex":"%m/%d/%y","%EX":"%H:%M:%S","%Ey":"%y","%EY":"%Y","%Od":"%d","%Oe":"%e","%OH":"%H","%OI":"%I","%Om":"%m","%OM":"%M","%OS":"%S","%Ou":"%u","%OU":"%U","%OV":"%V","%Ow":"%w","%OW":"%W","%Oy":"%y"};for(var l in s)a=a.replace(new RegExp(l,"g"),s[l]);var u=["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],c=["January","February","March","April","May","June","July","August","September","October","November","December"];function d(e,t,r){for(var n="number"==typeof e?e.toString():e||"";n.length<t;)n=r[0]+n;return n}function f(e,t){return d(e,t,"0")}function m(e,t){function r(e){return e<0?-1:e>0?1:0}var n;return 0===(n=r(e.getFullYear()-t.getFullYear()))&&0===(n=r(e.getMonth()-t.getMonth()))&&(n=r(e.getDate()-t.getDate())),n}function h(e){switch(e.getDay()){case 0:return new Date(e.getFullYear()-1,11,29);case 1:return e;case 2:return new Date(e.getFullYear(),0,3);case 3:return new Date(e.getFullYear(),0,2);case 4:return new Date(e.getFullYear(),0,1);case 5:return new Date(e.getFullYear()-1,11,31);case 6:return new Date(e.getFullYear()-1,11,30)}}function p(e){var t=fr(new Date(e.tm_year+1900,0,1),e.tm_yday),r=new Date(t.getFullYear(),0,4),n=new Date(t.getFullYear()+1,0,4),o=h(r),i=h(n);return m(o,t)<=0?m(i,t)<=0?t.getFullYear()+1:t.getFullYear():t.getFullYear()-1}var g={"%a":function(e){return u[e.tm_wday].substring(0,3)},"%A":function(e){return u[e.tm_wday]},"%b":function(e){return c[e.tm_mon].substring(0,3)},"%B":function(e){return c[e.tm_mon]},"%C":function(e){return f((e.tm_year+1900)/100|0,2)},"%d":function(e){return f(e.tm_mday,2)},"%e":function(e){return d(e.tm_mday,2," ")},"%g":function(e){return p(e).toString().substring(2)},"%G":function(e){return p(e)},"%H":function(e){return f(e.tm_hour,2)},"%I":function(e){var t=e.tm_hour;return 0==t?t=12:t>12&&(t-=12),f(t,2)},"%j":function(e){return f(e.tm_mday+ur(lr(e.tm_year+1900)?cr:dr,e.tm_mon-1),3)},"%m":function(e){return f(e.tm_mon+1,2)},"%M":function(e){return f(e.tm_min,2)},"%n":function(){return"\n"},"%p":function(e){return e.tm_hour>=0&&e.tm_hour<12?"AM":"PM"},"%S":function(e){return f(e.tm_sec,2)},"%t":function(){return"\t"},"%u":function(e){return e.tm_wday||7},"%U":function(e){var t=new Date(e.tm_year+1900,0,1),r=0===t.getDay()?t:fr(t,7-t.getDay()),n=new Date(e.tm_year+1900,e.tm_mon,e.tm_mday);if(m(r,n)<0){var o=ur(lr(n.getFullYear())?cr:dr,n.getMonth()-1)-31,i=31-r.getDate()+o+n.getDate();return f(Math.ceil(i/7),2)}return 0===m(r,t)?"01":"00"},"%V":function(e){var t,r=new Date(e.tm_year+1900,0,4),n=new Date(e.tm_year+1901,0,4),o=h(r),i=h(n),a=fr(new Date(e.tm_year+1900,0,1),e.tm_yday);return m(a,o)<0?"53":m(i,a)<=0?"01":(t=o.getFullYear()<e.tm_year+1900?e.tm_yday+32-o.getDate():e.tm_yday+1-o.getDate(),f(Math.ceil(t/7),2))},"%w":function(e){return e.tm_wday},"%W":function(e){var t=new Date(e.tm_year,0,1),r=1===t.getDay()?t:fr(t,0===t.getDay()?1:7-t.getDay()+1),n=new Date(e.tm_year+1900,e.tm_mon,e.tm_mday);if(m(r,n)<0){var o=ur(lr(n.getFullYear())?cr:dr,n.getMonth()-1)-31,i=31-r.getDate()+o+n.getDate();return f(Math.ceil(i/7),2)}return 0===m(r,t)?"01":"00"},"%y":function(e){return(e.tm_year+1900).toString().substring(2)},"%Y":function(e){return e.tm_year+1900},"%z":function(e){var t=e.tm_gmtoff,r=t>=0;return t=(t=Math.abs(t)/60)/60*100+t%60,(r?"+":"-")+String("0000"+t).slice(-4)},"%Z":function(e){return e.tm_zone},"%%":function(){return"%"}};for(var l in g)a.includes(l)&&(a=a.replace(new RegExp(l,"g"),g[l](i)));var v=yr(a,!1);return v.length>t?0:(Y(v,e),v.length-1)}(e,t,r,n)},Y:function(e){var t=Date.now()/1e3|0;return e&&(M[e>>2]=t),t}},Er=(function(){var e={a:wr};function t(e,t){var r,o,i=e.exports;n.asm=i,r=n.asm.Rb.buffer,D=r,n.HEAP8=A=new Int8Array(r),n.HEAP16=I=new Int16Array(r),n.HEAP32=M=new Int32Array(r),n.HEAPU8=L=new Uint8Array(r),n.HEAPU16=R=new Uint16Array(r),n.HEAPU32=F=new Uint32Array(r),n.HEAPF32=O=new Float32Array(r),n.HEAPF64=B=new Float64Array(r),q=n.asm.Vb,o=n.asm.Sb,X.unshift(o),ce()}function o(e){t(e.instance)}function i(t){return(m||"function"!=typeof fetch?Promise.resolve().then((function(){return me(re)})):fetch(re,{credentials:"same-origin"}).then((function(e){if(!e.ok)throw"failed to load wasm binary file at '"+re+"'";return e.arrayBuffer()})).catch((function(){return me(re)}))).then((function(t){return WebAssembly.instantiate(t,e)})).then((function(e){return e})).then(t,(function(e){p("failed to asynchronously prepare wasm: "+e),de(e)}))}if(ue(),n.instantiateWasm)try{return n.instantiateWasm(e,t)}catch(e){return p("Module.instantiateWasm callback failed with error: "+e),!1}(m||"function"!=typeof WebAssembly.instantiateStreaming||fe(re)||"function"!=typeof fetch?i(o):fetch(re,{credentials:"same-origin"}).then((function(t){return WebAssembly.instantiateStreaming(t,e).then(o,(function(e){return p("wasm streaming compile failed: "+e),p("falling back to ArrayBuffer instantiation"),i(o)}))}))).catch(r)}(),n.___wasm_call_ctors=function(){return(n.___wasm_call_ctors=n.asm.Sb).apply(null,arguments)},n._main=function(){return(n._main=n.asm.Tb).apply(null,arguments)},n._malloc=function(){return(Er=n._malloc=n.asm.Ub).apply(null,arguments)}),br=n._free=function(){return(br=n._free=n.asm.Wb).apply(null,arguments)},xr=n.___errno_location=function(){return(xr=n.___errno_location=n.asm.Xb).apply(null,arguments)},Cr=n.___getTypeName=function(){return(Cr=n.___getTypeName=n.asm.Yb).apply(null,arguments)},Pr=(n.___embind_register_native_and_builtin_types=function(){return(n.___embind_register_native_and_builtin_types=n.asm.Zb).apply(null,arguments)},n.__get_tzname=function(){return(Pr=n.__get_tzname=n.asm._b).apply(null,arguments)}),Sr=n.__get_daylight=function(){return(Sr=n.__get_daylight=n.asm.$b).apply(null,arguments)},kr=n.__get_timezone=function(){return(kr=n.__get_timezone=n.asm.ac).apply(null,arguments)},Tr=n.stackSave=function(){return(Tr=n.stackSave=n.asm.bc).apply(null,arguments)},Dr=n.stackRestore=function(){return(Dr=n.stackRestore=n.asm.cc).apply(null,arguments)},Ar=n.stackAlloc=function(){return(Ar=n.stackAlloc=n.asm.dc).apply(null,arguments)};function Lr(e){this.name="ExitStatus",this.message="Program terminated with exit("+e+")",this.status=e}function Ir(e){function r(){_r||(_r=!0,n.calledRun=!0,y||(n.noFSInit||Ce.init.initialized||Ce.init(),Ce.ignorePermissions=!1,be.init(),pe(X),pe(Z),t(n),n.onRuntimeInitialized&&n.onRuntimeInitialized(),Mr&&function(e){var t=n._main,r=(e=e||[]).length+1,o=Ar(4*(r+1));M[o>>2]=V(c);for(var i=1;i<r;i++)M[(o>>2)+i]=V(e[i-1]);M[(o>>2)+r]=0;try{var a=t(r,o);return Rr(a),a}catch(e){return ye(e)}}(e),function(){if(n.postRun)for("function"==typeof n.postRun&&(n.postRun=[n.postRun]);n.postRun.length;)e=n.postRun.shift(),J.unshift(e);var e;pe(J)}()))}e=e||u,ae>0||(function(){if(n.preRun)for("function"==typeof n.preRun&&(n.preRun=[n.preRun]);n.preRun.length;)e=n.preRun.shift(),K.unshift(e);var e;pe(K)}(),ae>0||(n.setStatus?(n.setStatus("Running..."),setTimeout((function(){setTimeout((function(){n.setStatus("")}),1),r()}),1)):r()))}function Rr(e,t){var r;v=e,te()||(ee=!0),v=r=e,te()||(n.onExit&&n.onExit(r),y=!0),d(r,new Lr(r))}if(n.dynCall_viijii=function(){return(n.dynCall_viijii=n.asm.ec).apply(null,arguments)},n.dynCall_iiijii=function(){return(n.dynCall_iiijii=n.asm.fc).apply(null,arguments)},n.dynCall_iijiii=function(){return(n.dynCall_iijiii=n.asm.gc).apply(null,arguments)},n.dynCall_jiiji=function(){return(n.dynCall_jiiji=n.asm.hc).apply(null,arguments)},n.dynCall_jj=function(){return(n.dynCall_jj=n.asm.ic).apply(null,arguments)},n.dynCall_iiij=function(){return(n.dynCall_iiij=n.asm.jc).apply(null,arguments)},n.dynCall_jiiiji=function(){return(n.dynCall_jiiiji=n.asm.kc).apply(null,arguments)},n.dynCall_jiji=function(){return(n.dynCall_jiji=n.asm.lc).apply(null,arguments)},n.dynCall_iiiiij=function(){return(n.dynCall_iiiiij=n.asm.mc).apply(null,arguments)},n.dynCall_iiiiijj=function(){return(n.dynCall_iiiiijj=n.asm.nc).apply(null,arguments)},n.dynCall_iiiiiijj=function(){return(n.dynCall_iiiiiijj=n.asm.oc).apply(null,arguments)},n.ccall=E,n.cwrap=function(e,t,r,n){var o=(r=r||[]).every((function(e){return"number"===e}));return"string"!==t&&o&&!n?w(e):function(){return E(e,t,r,arguments)}},n.FS=Ce,le=function e(){_r||Ir(),_r||(le=e)},n.run=Ir,n.preInit)for("function"==typeof n.preInit&&(n.preInit=[n.preInit]);n.preInit.length>0;)n.preInit.pop()();var Mr=!0;return n.noInitialRun&&(Mr=!1),Ir(),e.ready});class u{constructor(e=5,t=!0){this.count=0,this.max_items=5,this.curr_iter=1,this.lookup_map=new Map,this.check_iter=!0,this.max_items=e,this.check_iter=t}setCheckIter(e){this.check_iter=e}setMaxElements(e){this.max_items=e}addStitchElementCacheItem(e,t){this.count>=this.max_items&&this.head&&(!this.check_iter||this.head.last_seen<this.curr_iter)&&this.popHead();let r={element_item:t};return this.appendNode(e.toString(),r),r}addStitchElementItem(e,t,r){this.count>=this.max_items&&this.head&&(!this.check_iter||this.head.last_seen<this.curr_iter)&&this.popHead();let n={};return n.download=t.then((t=>(n.item=t,n.item.key=e,r))),this.appendNode(e,n),n}addAlphabetItem(e,t,r){this.count>=this.max_items&&(!this.check_iter||this.head&&this.head.last_seen<this.curr_iter)&&this.popHead();let n={};return n.download=t.then((e=>(n.alphabet_item=e,r))),this.appendNode(e,n),n}getItemByKey(e){let t=this.lookup_map.get(e);return t&&t!=this.tail&&this.tail&&(t.left&&(t.left.right=t.right),t.right&&(t.right.left=t.left),this.head==t&&(this.head=t.right),this.tail.right=t,t.left=this.tail,t.right=void 0,this.tail=t),t&&(t.last_seen=this.curr_iter),t?t.data:void 0}popHead(){this.head&&this.head.right?(this.lookup_map.delete(this.head.key),this.freeMemory(this.head.data),this.head.right.left=void 0,this.head=this.head.right,this.count=this.count-1):this.head&&(this.lookup_map.delete(this.head.key),this.freeMemory(this.head.data),this.head=void 0,this.tail=void 0,this.count=this.count-1)}freeMemory(e){e.alphabet_item&&(e.alphabet_item.decrementReferenceCount(),e.alphabet_item=void 0),e.item&&(e.item.decrementReferenceCount(),e.item=void 0),e.element_item&&(e.element_item.decrementReferenceCount(),e.element_item=void 0)}destroy(){for(;this.head;)this.popHead()}appendNode(e,t){let r=this.lookup_map.get(e);if(r)return r.data!==t&&this.freeMemory(r.data),r.key=e,r.last_seen=this.curr_iter,void(r.data=t);this.head&&this.tail?(this.tail.right={left:this.tail,data:t,last_seen:this.curr_iter,key:e},this.tail=this.tail.right):(this.head={data:t,last_seen:this.curr_iter,key:e},this.tail=this.head),this.count=this.count+1,this.lookup_map.set(e,this.tail)}incrementIter(){this.curr_iter=this.curr_iter+1}}class c{constructor(e){this.xdim=0,this.ydim=0,this.rect=t.emptyRect(),this.colors=[],this.letteringParams=[],this.subElements=[],this.stitchCount=0,this.key="",this.referenceCount=1,this.renderElement=e}incrementReferenceCount(){this.referenceCount=this.referenceCount+1}decrementReferenceCount(){this.referenceCount=this.referenceCount-1,0==this.referenceCount&&this.renderElement.delete()}}class d{constructor(e){this.referenceCount=1,this.internalAlphabet=e,this.alphabet_name=e.getAlphabetName();let t=e.getCharacters();this.characters=[];for(let e=0;e<t.size();e++)this.characters.push(t.get(e))}incrementReferenceCount(){this.referenceCount=this.referenceCount+1}decrementReferenceCount(){this.referenceCount=this.referenceCount-1,0==this.referenceCount&&this.internalAlphabet.delete()}}class f{constructor(){this.referenceCount=1}get internalReload(){return this._internalReload}set internalReload(e){e&&e.incrementReferenceCount(),this._internalReload&&this._internalReload.decrementReferenceCount(),this._internalReload=e}get element(){return this._element?this._element:this._internalReload?this._internalReload.renderElement:void 0}clone(){let e=this.element,t=new f;return t.internalReload=this._internalReload,e&&(t._element=e.clone()),t}incrementReferenceCount(){this.referenceCount=this.referenceCount+1}decrementReferenceCount(){this.referenceCount=this.referenceCount-1,0==this.referenceCount&&this._element&&(this._element.delete(),this._element=void 0),0==this.referenceCount&&this._internalReload&&(this._internalReload.decrementReferenceCount(),this._internalReload=void 0)}}var m=function(e,t,r,n){return new(r||(r=Promise))((function(o,i){function a(e){try{l(n.next(e))}catch(e){i(e)}}function s(e){try{l(n.throw(e))}catch(e){i(e)}}function l(e){var t;e.done?o(e.value):(t=e.value,t instanceof r?t:new r((function(e){e(t)}))).then(a,s)}l((n=n.apply(e,t||[])).next())}))};class h{constructor(e){this._designCache=new u,this._alphabetCache=new u,this._elemCache=new u,this._noopid=1,this._module=e}destroy(){this.wireframeElement&&this.wireframeElement.delete(),this.internalSelectionBox&&this.internalSelectionBox.delete(),this._alphabetCache.destroy(),this._designCache.destroy(),this._elemCache.destroy()}_internalGetFromElemCache(e){return this._internalSyncElement(e,(()=>{}),new Set,!1),this._elemCache.getItemByKey(e.uid)}calcRectForTransform(e,t){let r=this._internalGetFromElemCache(e);if(r&&r.element_item&&r.element_item.element){let e=r.element_item.element.getCalcRect(t.m00,t.m01,t.m02,t.m10,t.m11,t.m12),n={llx:e.llx,lly:e.lly,urx:e.urx,ury:e.ury};return e.delete(),n}return console.error("Element not in cache"),{llx:0,lly:0,urx:0,ury:0}}hitTest(e,t,r,n){let o={hit:!1},i=this._internalGetFromElemCache(e);if(i&&i.element_item&&i.element_item.element){let e=i.element_item.element.hitTest(t,r,n);o={hit:e.hit,subElementHit:e.subElementHit,colorIndex:e.colorIndex,subElementColorIndexHit:e.subElementColorIndexHit,distanceInPoints:e.distanceInPoints}}return o}setLRUCacheSize(e=5,t=5,r=5){this._designCache.setMaxElements(e),this._alphabetCache.setMaxElements(t),this._elemCache.setMaxElements(r)}ensureImageLoaded(e,t=0){return m(this,void 0,void 0,(function*(){let r=t,n=this._designCache.getItemByKey(e.image_params.imageUrl),o=e.image_params;if(!n||!n.download){let t=new Promise(((e,t)=>{this._module.Renderer.loadGraphic(o.imageUrl,((t,r,n)=>{let i=new c(t);i.xdim=r,i.ydim=n;let a=o.defaultDpi?o.defaultDpi:96,s=o.defaultCenterX?o.defaultCenterX:0,l=o.defaultCenterY?o.defaultCenterY:0,u=r/a*254,d=n/a*254;i.rect={llx:-.5*u+s,lly:-.5*d+l,urx:.5*u+s,ury:.5*d+l};var f=new this._module.AffineMatrix;let m=new this._module.Rectangle;m.llx=i.rect.llx,m.lly=i.rect.lly,m.urx=i.rect.urx,m.urx=i.rect.ury,t.setImageMatrix(m,f),m.delete(),f.delete(),e(i)}),(e=>{t(new Error(e))}))}));if(n=this._designCache.addStitchElementItem(e.image_params.imageUrl,t,0),n.item){let t=new f;t.internalReload=n.item,this._elemCache.addStitchElementCacheItem(e.uid,t)}}return n&&!n.item&&n.download&&(yield n.download),!e.rect&&n&&n.item&&(e.rect=n.item.rect),n&&n.download?n.download:r}))}doSyncLettering(e){let t=!1,r=this._elemCache.getItemByKey(e.uid);if(r&&r.element_item&&e.letteringParams&&e.letteringParams.length>0&&e.letteringParams[0].alphabet){let n=this._internalCheckAlphabetLoaded(e.letteringParams[0].alphabet);if(n&&r.element_item.element){t=!0;const o=0;e.letteringParams[o].alphabet;let i=e.letteringParams[o].text;if(e.letteringParams[o].baseline_type){let t=r.element_item.element.getLetteringAlphabet(o),a=r.element_item.element.getLetterParams(o),s=(r.element_item.element,e.letteringParams[o].baseline_type||"Straight"),l="Arced"===s?e.letteringParams[o].radius:0,u=e.letteringParams[o].height;t==n.alphabet_name&&u==a.height&&a.text==i&&a.baseline_type==s&&a.radius==l||(a.baseline_type=s,a.height=u,a.radius=l||0,a.text=i,r.element_item.element.setFullLetteringParams(o,a,n.internalAlphabet),console.log("Update lettering params V: ",e.letteringParams[o])),a.delete()}else{let e=r.element_item.element.getLetteringAlphabet(o),t=r.element_item.element.getLetteringText(o);e==n.alphabet_name&&t==i||(r.element_item.element.setLetteringParams(o,i,n.internalAlphabet),console.log("Update lettering text V: ",i))}}}else if(!r&&e.letteringParams&&e.letteringParams.length>0&&e.letteringParams[0].alphabet){let n=this._internalCheckAlphabetLoaded(e.letteringParams[0].alphabet);if(n){t=!0,console.log("Create lettering");const o=new f;let i=new this._module.LetterParams;i.text=e.letteringParams[0].text,e.letteringParams[0].height>0&&(i.height=e.letteringParams[0].height),e.letteringParams[0].radius&&"Arced"===e.letteringParams[0].baseline_type&&(i.radius=e.letteringParams[0].radius,i.baseline_type="Arced"),o._element=this._module.Renderer.generateLettering(i,n.internalAlphabet),this._internalAddCache(e,o),r=this._elemCache.getItemByKey(e.uid),i.delete()}}return t}getStitchElementMetadataIfLoaded(e){if(e.design_params){let t=this._designCache.getItemByKey(e.design_params.designMetadataUrl);if(t&&t.item)return{stitchCount:t.item.stitchCount,originalBoundingBox:t.item.rect,originalColors:t.item.colors,originalSubElements:t.item.subElements,originalLetteringParams:t.item.letteringParams}}e.type==o.LETTERING&&e.letteringParams&&e.letteringParams.length>0&&e.letteringParams[0].alphabet&&this.doSyncLettering(e);let t=this._elemCache.getItemByKey(e.uid);if(t&&t.item)return{stitchCount:t.item.stitchCount,originalBoundingBox:t.item.rect,originalColors:t.item.colors,originalSubElements:t.item.subElements,originalLetteringParams:t.item.letteringParams};if(t&&t.element_item&&t.element_item.element){const e=t.element_item.element.getRect(),o=t.element_item.element.getSubElements();var r=o.size();const a=[];for(var n=0;n<r;n++){let e=o.get(n),t=[];for(var i=0;i<e.colorIndexes.size();i++)t.push(e.colorIndexes.get(i));let r=[];for(i=0;i<e.selectedColorIndexes.size();i++)r.push(!!e.selectedColorIndexes.get(i));let s={internalSubElementIndex:e.subIdx,letteringIndex:e.letteringIndex,colorsIndexes:t,selectedColorIndexes:r.length?r:void 0};a.push(s),e.delete()}o.delete();const s={llx:e.llx,lly:e.lly,urx:e.urx,ury:e.ury};return e.delete(),console.log("NewST",t.element_item.element.getStitchCount()),{stitchCount:t.element_item.element.getStitchCount(),originalBoundingBox:s,originalColors:[],originalSubElements:a,originalLetteringParams:[]}}}ensureElementLoaded(e,t=0,r=!1){var n,o;return m(this,void 0,void 0,(function*(){let i=t;if(e.design_params){let i=e.design_params,a=this._designCache.getItemByKey(i.designMetadataUrl);if(!a||!a.download){let r=new Promise(((e,t)=>{this._module.Renderer.loadDesign(i.designMetadataUrl,(t=>{let r=new c(t);r.stitchCount=t.getStitchCount();let n=t.getRect();if(r.rect={llx:n.llx,lly:n.lly,urx:n.urx,ury:n.ury},i&&i.colors)r.colors=i.colors;else{var o=t.getColors();if(o.size()>0){r.colors=[];for(var a=0;a<o.size();a++){let e=o.get(a),t={red:e.red,green:e.green,blue:e.blue,productLine:e.productLine,name:e.name,manufacturer:e.manufacturer,code:e.code};r.colors.push(t),e.delete()}}o.delete()}for(var s=t.getNumLetteringElems(),l=0;l<s;l++){let e=t.getLetteringAlphabet(l),n={text:t.getLetteringText(l),height:t.getLetteringHeight(l),original_alphabet_name:e};r.letteringParams.push(n)}var u=t.getSubElements(),d=u.size();for(l=0;l<d;l++){let e=u.get(l),t=[];for(var f=0;f<e.colorIndexes.size();f++)t.push(e.colorIndexes.get(f));let n=[];for(f=0;f<e.selectedColorIndexes.size();f++)n.push(!!e.selectedColorIndexes.get(f));let o={internalSubElementIndex:e.subIdx,letteringIndex:e.letteringIndex,colorsIndexes:t,selectedColorIndexes:n.length?n:void 0};r.subElements.push(o),e.delete()}u.delete(),e(r)}),(e=>{t(new Error(e))}))}));if(a=this._designCache.addStitchElementItem(i.designMetadataUrl,r,t),a.item){let t=new f;t.internalReload=a.item,this._elemCache.addStitchElementCacheItem(e.uid,t)}}if(a&&!a.item&&a.download&&(yield a.download),a&&a.item){const t=this._elemCache.getItemByKey(e.uid);if((null===(n=null==t?void 0:t.item)||void 0===n?void 0:n.key)!==(null===(o=a.item)||void 0===o?void 0:o.key)){console.log("Replacing Element Node");let t=new f;t.internalReload=a.item,this._elemCache.addStitchElementCacheItem(e.uid,t)}}if(r&&!e.letteringParams&&a&&a.item&&(e.letteringParams=a.item.letteringParams),r&&!e.colors&&a&&a.item&&(e.colors=a.item.colors),r&&!e.subElements&&a&&a.item&&(e.subElements=a.item.subElements),a&&a.download)return a.download}else if(e.letteringParams&&e.letteringParams.length>0){const r=e.letteringParams[0];if(r.alphabet)return this.ensureAlphabetLoaded(r.alphabet,t)}return i}))}getAlphabetMetadataIfLoaded(e){if(e.alphabet_metadata_path){let t=e.alphabet_metadata_path,r=this._alphabetCache.getItemByKey(t);if(r&&r.alphabet_item)return{alphabet_name:r.alphabet_item.alphabet_name,valid_characters:r.alphabet_item.characters}}}ensureAlphabetLoaded(e,t=0){return m(this,void 0,void 0,(function*(){let r=t;if(e.alphabet_metadata_path){let r=e.alphabet_metadata_path,o=this._alphabetCache.getItemByKey(r);if(!o||!o.download){var n=new Promise(((e,t)=>{this._module.Renderer.loadAlphabet(r,(t=>{let r=new d(t);e(r)}),(e=>{t(new Error(e))}))}));o=this._alphabetCache.addAlphabetItem(r,n,t)}if(o&&!o.item&&o.download&&(yield o.download),o&&o.download)return o.download}return r}))}checkAlphabetLoaded(e){return!!this._internalCheckAlphabetLoaded(e)}_internalCheckAlphabetLoaded(e){if(e.alphabet_metadata_path){let t=this._alphabetCache.getItemByKey(e.alphabet_metadata_path);if(t)return t.alphabet_item}}checkDesignLoaded(e){return!!this._internalCheckDesignLoaded(e)}_internalCheckDesignLoaded(e){if(e.design_params){let t=this._designCache.getItemByKey(e.design_params.designMetadataUrl);if(t)return t.item}}checkImageLoaded(e){return!!this._internalCheckImageLoaded(e)}_internalCheckImageLoaded(e){let t=this._designCache.getItemByKey(e.image_params.imageUrl);if(t)return t.item}_internalCheckCached(e){let t=this._elemCache.getItemByKey(e.uid);if(t)return t.item&&this._designCache.getItemByKey(t.item.key),t.element_item}_internalAddCache(e,t){return this._elemCache.addStitchElementCacheItem(e.uid,t)}_internalIncrementIterNumber(){this._alphabetCache.incrementIter(),this._designCache.incrementIter(),this._elemCache.incrementIter()}getImageMetadataIfLoaded(e){let t=this._designCache.getItemByKey(e.image_params.imageUrl);if(t&&t.item)return{xdim:t.item.xdim,ydim:t.item.ydim,defaultRect:t.item.rect}}_internalGetSelectionBoxRect(e,i){if(e&&i){let a;for(let t of e.elements)t&&t.type==n.SELECTION_BOX&&(a=t);if(a&&a.display){if(this.wireframeElement||(this.wireframeElement=this._module.Renderer.createWireframeElement(),this.internalSelectionBox=this._module.Renderer.createSelectionBoxElement(),this.wireframeElement.setSelectionBox(this.internalSelectionBox)),this.internalSelectionBox){this.internalSelectionBox.setIsDisplayed(a.display),this.internalSelectionBox.setIsRotate(a.isRotate);let e=a.rect;if(!e&&a.selectedElemIds&&a.selectedElemIds.length>0){let n=r.identityMatrix(),s=new Set(a.selectedElemIds);for(let r of i.elements)if(r&&s.has(r.uid)&&r.type!=o.IMAGE){let o=r,i=this.calcRectForTransform(o,o.matrix?o.matrix:n);e=e?t.union(e,i):i}}if(e){let t=new this._module.Rectangle;t.llx=e.llx,t.lly=e.lly,t.urx=e.urx,t.ury=e.ury,this.internalSelectionBox.setRect(t),t.delete()}else this.internalSelectionBox.setIsDisplayed(!1);if(a.matrix){let e=new this._module.AffineMatrix;e.m00=a.matrix.m00,e.m01=a.matrix.m01,e.m02=a.matrix.m02,e.m10=a.matrix.m10,e.m11=a.matrix.m11,e.m12=a.matrix.m12,this.internalSelectionBox.setMatrix(e),e.delete()}else this.internalSelectionBox.resetMatrix()}return this.wireframeElement}}if(this.wireframeElement&&this.internalSelectionBox)return this.internalSelectionBox.setIsDisplayed(!1),this.wireframeElement}hitTestSelectionBox(e,t){return this.internalSelectionBox&&this.internalSelectionBox.isDisplayed()?function(e){switch(e){case 1:return i.hitTopLeft;case 2:return i.hitTopRight;case 3:return i.hitBottomRight;case 4:return i.hitBottomLeft;case 5:return i.hitTop;case 6:return i.hitRight;case 7:return i.hitBottom;case 8:return i.hitLeft;case 9:return i.hitMiddle;default:return i.hitNothing}}(this.internalSelectionBox.hitTest(e,t).value):i.hitNothing}getSelectionBoxRect(){let e=s.createEmpty();if(this.internalSelectionBox){e.display=this.internalSelectionBox.isDisplayed(),e.isRotate=this.internalSelectionBox.getIsRotate();let n=this.internalSelectionBox.getRectangle();e.rect=t.createRect(n.llx,n.lly,n.urx,n.ury),n.delete();let o=this.internalSelectionBox.getMatrix(),i=r.createMatrix(o.m00,o.m01,o.m02,o.m10,o.m11,o.m12);r.isIdentity(i)||(e.matrix=i),o.delete()}return e}_internalSyncElement(e,t,r,n){let i;if(e){let d,m=e,h=!0;if(m&&(d=this._internalCheckCached(m)),!d)if(m&&m.type==o.IMAGE){let e=m,r=this._internalCheckImageLoaded(e),o=this._noopid++;r?r&&(d=new f,d.internalReload=r,this._internalAddCache(m,d)):n&&(console.debug("Lazy Downloading image",e.image_params.imageUrl),this.ensureImageLoaded(e,o).then((e=>{t(e==o)})))}else if(m&&m.type==o.GRID)d=new f,d._element=this._module.Renderer.createGridElement(),this._internalAddCache(m,d);else if(m){let e=m;if(!e.design_params&&e.letteringParams&&1==e.letteringParams.length)if(e.letteringParams[0].alphabet){let r=this._internalCheckAlphabetLoaded(e.letteringParams[0].alphabet);if(r&&r.internalAlphabet){d=new f;let t=new this._module.LetterParams;t.text=e.letteringParams[0].text,e.letteringParams[0].height>0&&(t.height=e.letteringParams[0].height),e.letteringParams[0].radius&&"Arced"===e.letteringParams[0].baseline_type&&(t.radius=e.letteringParams[0].radius,t.baseline_type="Arced"),d._element=this._module.Renderer.generateLettering(t,r.internalAlphabet),this._internalAddCache(m,d),t.delete()}else if(!r&&(h=!1,n)){console.debug("Lazy Downloading alphabet",e.letteringParams[0].alphabet.alphabet_metadata_path);let r=this._noopid++;this.ensureAlphabetLoaded(e.letteringParams[0].alphabet,r).then((e=>{t(e==r)}))}}else h=!1;else{let r=this._internalCheckDesignLoaded(e),o=this._noopid++;r?r&&(d=new f,d.internalReload=r,this._internalAddCache(m,d)):n&&(console.debug("Lazy Downloading element",e.design_params?e.design_params.designMetadataUrl:""),this.ensureElementLoaded(e,o).then((e=>{t(e==o)})))}}if(m&&d&&d.element){if(r.has(d.element)?(d=d.clone(),this._internalAddCache(m,d)):r.add(d.element),(m.type==o.DESIGN||m.type==o.IMAGE||m.type==o.LETTERING)&&d.element){var a,s=new this._module.AffineMatrix;if((a=(m.type,o.IMAGE,m.matrix))&&(s.m00=a.m00,s.m01=a.m01,s.m02=a.m02,s.m10=a.m10,s.m11=a.m11,s.m12=a.m12),m.type!=o.IMAGE)d.element.setMatrix(s);else{let e=m.rect;!e&&d.internalReload&&(e=d.internalReload.rect);let t=new this._module.Rectangle;e&&d.element?(t.llx=e.llx,t.lly=e.lly,t.urx=e.urx,t.ury=e.ury,d.element.setImageMatrix(t,s)):(console.log("Error: image not cached"),h=!1),t.delete()}s.delete()}if(m.type!=o.IMAGE&&m.type!=o.GRID&&d.element){let e=!0,t=m;if(t.colors&&t.colors.length>0&&(e=!1),t.subElements&&t.subElements.length>0&&(e=!1),d.element.revertColorChanges(),!e){if(t.colors&&t.colors.length>0){var l=new this._module.VectorThreadColor;for(let e of t.colors){let t=new this._module.ThreadColor;t.red=e.red,t.green=e.green,t.blue=e.blue,e.name&&(t.name=e.name),e.manufacturer&&(t.manufacturer=e.manufacturer),e.productLine&&(t.productLine=e.productLine),e.code&&(t.code=e.code),l.push_back(t)}d.element.setColors(l);let e=l.size();for(let t=0;t<e;t++)l.get(t).delete();l.delete()}if(t.subElements&&t.subElements.length>0){var u=new this._module.VectorSubElement;for(let e of t.subElements){var c=new this._module.SubElement;c.subIdx=e.internalSubElementIndex,c.letteringIndex=e.letteringIndex;let t=new this._module.VectorInts;for(let r of e.colorsIndexes)t.push_back(r);if(c.colorIndexes=t,e.selectedColorIndexes){let t=new this._module.VectorInts;for(let r of e.selectedColorIndexes)t.push_back(r?1:0);c.selectedColorIndexes=t,t.delete()}u.push_back(c),t.delete()}d.element.setSubElements(u);let e=u.size();for(let t=0;t<e;t++)u.get(t).delete();u.delete()}}}if(m.type!=o.IMAGE&&m.type!=o.GRID&&d.element){let e=m,r=0;d.internalReload?r=d.internalReload.letteringParams.length:d.element&&(r=d.element.getNumLetteringElems());for(let o=0;o<r;o++)if(e.letteringParams&&o<e.letteringParams.length){let r=e.letteringParams[o].alphabet,i=e.letteringParams[o].text;if(r){let a=this._internalCheckAlphabetLoaded(r);if(a&&a.internalAlphabet)if(e.letteringParams[o].baseline_type){let t=d.element.getLetteringAlphabet(o),r=d.element.getLetterParams(o),n=(d.element,e.letteringParams[o].baseline_type||"Straight"),s="Arced"===n?e.letteringParams[o].radius:0,l=e.letteringParams[o].height;t==a.alphabet_name&&l==r.height&&r.text==i&&r.baseline_type==n&&r.radius==s||(r.baseline_type=n,r.height=l,r.radius=s||0,r.text=i,d.element.setFullLetteringParams(o,r,a.internalAlphabet),console.log("Update lettering params: ",e.letteringParams[o])),r.delete()}else{let e=d.element.getLetteringAlphabet(o),t=d.element.getLetteringText(o);e==a.alphabet_name&&t==i||(d.element.setLetteringParams(o,i,a.internalAlphabet),console.log("Update lettering text: ",i))}else if(n){console.debug("Lazy Downloading alphabet",r.alphabet_metadata_path);let e=this._noopid++;this.ensureAlphabetLoaded(r,e).then((r=>{t(r==e)}))}}else d.element.hasLetteringChanges(o)&&d.element.revertLetteringChanges(o)}else d.element.hasLetteringChanges(o)&&d.element.revertLetteringChanges(o)}if(m.type==o.GRID&&d.element){let e=m;if(e.grid_params){let t=new this._module.GridParams;e.grid_params.gridColor&&(t.gridColor.red=e.grid_params.gridColor.red,t.gridColor.green=e.grid_params.gridColor.green,t.gridColor.blue=e.grid_params.gridColor.blue),e.grid_params.originColor&&(t.originColor.red=e.grid_params.originColor.red,t.originColor.green=e.grid_params.originColor.green,t.originColor.blue=e.grid_params.originColor.blue),t.showGrid=e.grid_params.showGrid,t.showOrigin=e.grid_params.showOrigin,e.grid_params.gridSize&&(t.gridSpaceX=e.grid_params.gridSize,t.gridSpaceY=e.grid_params.gridSize),e.grid_params.gridSubDivs&&(t.subDivisions=e.grid_params.gridSubDivs),d.element.setGridParams(t),t.delete()}}h&&d.element&&(i=d)}}return i}static cloneBaseElement(e){return e.type==o.IMAGE?h.cloneImageElement(e):h.cloneStitchElement(e)}static cloneStitchElement(e){let t=Object.assign({},e);return t.colors&&(t.colors=[...t.colors]),t.letteringParams&&(t.letteringParams=[...t.letteringParams]),t.subElements&&(t.subElements=[...t.subElements]),t}static cloneImageElement(e){return Object.assign({},e)}}class p{static createDefault(){return{enable3d:!0,enableTwists:!1,directionalLight:!1,enableTextures:!0,lightHeightScale:1,highQualityZoomLevel:75,enableZBuffer:!0}}static cloneThreadRenderOptions(e){return Object.assign({},e)}}var g=function(e,t,r,n){return new(r||(r=Promise))((function(o,i){function a(e){try{l(n.next(e))}catch(e){i(e)}}function s(e){try{l(n.throw(e))}catch(e){i(e)}}function l(e){var t;e.done?o(e.value):(t=e.value,t instanceof r?t:new r((function(e){e(t)}))).then(a,s)}l((n=n.apply(e,t||[])).next())}))};class v{constructor(e){this._idbfsMounted=!1,this._module=e}ensureIDBFSMounted(){return g(this,void 0,void 0,(function*(){if(!this._idbfsMounted){if(!this._idbfsPromise){let e,t;const r=new Promise(((r,n)=>{e=r,t=n}));this._idbfsPromise=r,this._module.FS.mkdir("/data"),this._module.FS.mount(IDBFS,{},"/data"),this._module.FS.syncfs(!0,(r=>{this._idbfsMounted=!0,this._idbfsPromise=void 0,r?t("Failed to mount"):e(!0)}))}if(this._idbfsPromise)return this._idbfsPromise}return Promise.resolve(!0)}))}writeToFile(e,t,r=!1){let n="/";r&&(n="/data/");let o=n+t;return this._module.FS.writeFile(o,e),"file://"+o}syncFileAfterWriteToPermanent(){return g(this,void 0,void 0,(function*(){let e,t;const r=new Promise(((r,n)=>{e=r,t=n}));return this._module.FS.syncfs(!1,(r=>{r?t("Failed to sync"):e(!0)})),r}))}}var y=function(e,t,r,n){return new(r||(r=Promise))((function(o,i){function a(e){try{l(n.next(e))}catch(e){i(e)}}function s(e){try{l(n.throw(e))}catch(e){i(e)}}function l(e){var t;e.done?o(e.value):(t=e.value,t instanceof r?t:new r((function(e){e(t)}))).then(a,s)}l((n=n.apply(e,t||[])).next())}))};class _{constructor(e,t){this._renderer=e,this._module=t,this._stitchElementUtil=new h(t),this._fileInterface=new v(t)}get elementUtil(){return this._stitchElementUtil}get localFileInterface(){return this._fileInterface}createImageElement(e,t){return y(this,void 0,void 0,(function*(){let r=this.createImageElementLazyLoad(e,t);return yield this._stitchElementUtil.ensureImageLoaded(r),r}))}createImageElementLazyLoad(e,t){return{uid:t||b(),type:o.IMAGE,image_params:e}}createDesignElement(e,t){return y(this,void 0,void 0,(function*(){let r=this.createDesignElementLazyLoad(e,t);return yield this._stitchElementUtil.ensureElementLoaded(r,void 0,!0),r}))}createDesignElementLazyLoad(e,t){return{uid:t||b(),type:o.DESIGN,design_params:e}}createLetteringElementLazyLoad(e,t){return e.alphabet=t,{uid:b(),type:o.LETTERING,letteringParams:[e]}}createLetteringElement(e,t){return y(this,void 0,void 0,(function*(){let r=this.createLetteringElementLazyLoad(e,t);return yield this._stitchElementUtil.ensureElementLoaded(r,void 0,!0),r}))}createAlphabet(e){return y(this,void 0,void 0,(function*(){console.log("Create alphabet");let t=this.createAlphabetLazyLoad(e);return yield this._stitchElementUtil.ensureAlphabetLoaded(t),t}))}createAlphabetLazyLoad(e){return{alphabet_metadata_path:e}}createSelectionBox(){return{type:n.SELECTION_BOX,display:!1,rect:t.emptyRect(),isRotate:!1}}createGridElement(e){return{uid:b(),type:o.GRID,grid_params:e}}createScene(){return{elements:[],bgColor:{red:200,green:200,blue:200,alpha:255}}}destroy(){this._stitchElementUtil.destroy()}}class w{constructor(e,t){this._autoZoom=0,this._noopid=1,this._animationRequested=!1,this._renderer=e,this._elementFactory=new _(e,t),this._module=t,this._renderOptions=p.createDefault(),"undefined"!=typeof navigator&&/Android|webOS|iPhone|iPad|iPod|Opera Mini/i.test(navigator.userAgent)&&(this._renderOptions.directionalLight=!0),this._updateRenderOptions()}updateRenderScene(e){if(this._elementFactory.elementUtil._internalIncrementIterNumber(),this._renderer){console.debug("Scene Updated",e),this._scene=e,this._renderer.setBackgroundColor(e.bgColor.red,e.bgColor.green,e.bgColor.blue);var t=new this._module.VectorRenderElement;let r=new Set;for(let n of e.elements){let e=this._elementFactory.elementUtil._internalSyncElement(n,(e=>{this._scene&&this.updateRenderScene(this._scene),this.redraw()}),r,!0);e&&e.element&&t.push_back(e.element)}this._renderer.setRenderElements(t),t.delete(),this._layer&&this._internalSyncWireframe(),this.redraw()}}_internalSyncWireframe(){if(this._renderer){let e=this._elementFactory.elementUtil._internalGetSelectionBoxRect(this._layer,this._scene),t=new this._module.VectorWireframeElement;e&&t.push_back(e),this._renderer.setWireframeElements(t),t.delete()}}setWireframeElements(e){this._renderer&&(this._layer=e,this._internalSyncWireframe(),this.redraw())}getFactory(){return this._elementFactory}setViewPort(e,t){if(this._viewPort=e,this._renderer){if(console.debug("ViewPort Updated",e),t&&t.valid()){let r=t.idempotenceVal?t.idempotenceVal:Date.now();this._renderer.setViewPortWithAnimation(e.llx,e.lly,e.urx,e.ury,t.durationMs,r,this._autoZoom)}else this._renderer.setViewport(e.llx,e.lly,e.urx,e.ury,this._autoZoom);this.redraw()}}getViewPort(){return this._viewPort}handleCanvasSizeChanged(e){e&&(this._resizeFrameBuffer=e),this._renderer&&(console.debug("HandleCanvasSizeChanged"),this._renderer.handleCanvasSizeChanged(),this.redraw())}redraw(){this._animationRequested||(this._animationRequested=!0,window.requestAnimationFrame((()=>{this._resizeFrameBuffer&&(this._resizeFrameBuffer(),this._resizeFrameBuffer=void 0),this._animationRequested=!1,this._renderer&&(console.debug("Redraw"),this._renderer.doDrawEvent()&&this.redraw())})))}redrawWireframe(){this.redraw()}_updateRenderOptions(){if(this._renderer){let e=new this._module.ThreadRenderOptions;e.directionalLight=this._renderOptions.directionalLight,e.enable3d=this._renderOptions.enable3d,e.enableTextures=this._renderOptions.enableTextures,e.enableTwists=this._renderOptions.enableTwists,e.highQualityZoomLevel=this._renderOptions.highQualityZoomLevel,e.lightHeightScale=this._renderOptions.lightHeightScale,e.enableZBuffer=this._renderOptions.enableZBuffer,this._renderer.setThreadRenderOptions(e),e.delete(),this.redraw()}}set threadRenderOptions(e){this._renderOptions=e,this._updateRenderOptions()}get threadRenderOptions(){return this._renderOptions}setZoom(e){this._autoZoom=e,this.redraw()}destroy(){this._renderer&&(this._renderer.delete(),this._renderer=void 0)}valid(){return!!this._renderer}}class E{constructor(){this.uid=1,this.prefix=Date.now().toString()+"_"}}function b(){return globalThis._MELCO_RENDERER_MODULE_||(globalThis._MELCO_RENDERER_MODULE_=new E),globalThis._MELCO_RENDERER_MODULE_.uid=globalThis._MELCO_RENDERER_MODULE_.uid+1,globalThis._MELCO_RENDERER_MODULE_.prefix+globalThis._MELCO_RENDERER_MODULE_.uid.toString()}class x{static zoomAroundCenter(e,r){return this.zoomAroundPoint(e,t.center(e),r)}static panViewPort(e,r){return t.offset(e,r.x,r.y)}static clientToLogical(e,t,r,n){let o=r,i=n;return{x:e.x/o*(t.urx-t.llx)+t.llx,y:t.ury-e.y/i*(t.ury-t.lly)}}static logicalToClient(e,t,r,n){let o=r,i=n;return{x:(e.x-t.llx)*o/(t.urx-t.llx),y:(t.ury-e.y)*i/(t.ury-t.lly)}}static zoomAroundPoint(r,n,o){var i=n,a=x.logicalToClient(n,r,500,500),s=t.multiply(o,r),l=x.clientToLogical(a,s,500,500),u=e.substract(i,l);return t.offset(s,u.x,u.y)}static zoomToFit(e,r,n,o,i){let a=t.center(e),s=Math.min(.25*r,i),l=Math.min(.25*n,i),u=(e.urx-e.llx)/(r-2*s),c=(e.ury-e.lly)/(n-2*l),d=Math.max(u,c);if(d*r<1)d=96/254;else{let e=254/d;o>0&&e>o&&(d*=e/o)}let f=r*d,m=n*d;return{llx:a.x-f/2,lly:a.y-m/2,urx:a.x+f/2,ury:a.y+m/2}}static normalizeViewRect(n){if(n.designRects.length>0&&n.designRects.length==n.designTransforms.length&&0!=t.width(n.imageRect)&&0!=t.height(n.imageRect)){n.clone();let o=[];for(let i=0;i<n.designRects.length;i++){let a=n.designRects[i],s=n.designTransforms[i];0!=t.width(a)&&0!=t.height(a)&&(o.push(e.distance(r.calcPoint(s,{x:a.llx,y:t.center(a).y}),r.calcPoint(s,{x:a.urx,y:t.center(a).y}))/t.width(a)),o.push(e.distance(r.calcPoint(s,{x:t.center(a).x,y:a.lly}),r.calcPoint(s,{x:t.center(a).x,y:a.ury}))/t.height(a)))}if(o.length>0){let e=n.clone(),i=0;for(let e of o)i+=e;let a=1/(i/o.length),s=r.scaleMatrix(a,a);r.isIdentity(n.imageMatrix),e.imageRect=t.multiply(a,e.imageRect),e.viewPort=t.multiply(a,e.viewPort);for(let t=0;t<n.designTransforms.length;t++)e.designTransforms[t]=r.multiply(s,e.designTransforms[t]);let l=r.calcPoint(n.imageMatrix,t.center(n.imageRect)),u=r.calcPoint(n.imageMatrix,t.center(e.imageRect)),c=l.x-u.x,d=l.y-u.y,f=r.translateMatrix(c,d);r.isIdentity(e.imageMatrix),e.imageRect=t.offset(e.imageRect,c,d),e.viewPort=t.offset(e.viewPort,c,d);for(let t=0;t<e.designTransforms.length;t++)e.designTransforms[t]=r.multiply(f,e.designTransforms[t]);return e}}return n}}(async()=>{const e=(()=>{const e=document.createElement("canvas");return e.id="canvas1",e.width=500,e.height=500,e.style.display="block",e})();document.body.appendChild(e);let t=await function(e,t,r){return y(this,void 0,void 0,(function*(){let n=!0;void 0!==r&&(n=r);var o="",i=null;if("string"==typeof e)o=e,i=document.getElementById(o);else{if(!e.id)throw new Error("Canvas doesnt have id");o=e.id,i=e}if(!i)throw new Error("Canvas element doesnt exist");let a=function(e){if(globalThis._MELCO_RENDERER_MODULE_||(globalThis._MELCO_RENDERER_MODULE_=new E),!globalThis._MELCO_RENDERER_MODULE_.module){let t={locateFile:function(t,r){return"MelcoRendererApp.wasm"==t?e||"https://assets-cdn.melcocloud.com/stitchservice/@melco/renderer/0.3.1-2/"+t:r+t},onAbort:function(){globalThis._MELCO_RENDERER_MODULE_=void 0},doNotCaptureKeyboard:!0};globalThis._MELCO_RENDERER_MODULE_.module=l(t)}return globalThis._MELCO_RENDERER_MODULE_}(t),s=yield a.module;if(!s)throw new Error("Module couldnt be loaded");s.canvas=i;let u=s.createRenderer(o,n);if(!u)throw new Error("Failed to initialize gl context");return new w(u,s)}))}(e),r=t.getFactory(),n={},o=await r.createDesignElement({designMetadataUrl:"https://teststitchenginepublic.blob.core.windows.net/rendercache/designcache/Anchor.rfm"}),i=r.elementUtil.getStitchElementMetadataIfLoaded(o).originalBoundingBox;n.elements=[o],n.bgColor={red:200,green:200,blue:200,alpha:255};let a=x.zoomToFit(i,500,500,96,10);t.setViewPort(a),console.log(n),t.updateRenderScene(n),t.redraw(),window.render_app_data={renderer:t},console.log("Successfully initialized")})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,